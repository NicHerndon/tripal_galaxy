<?php
/**
 * Implements hook_element_info().
 *
 * Used for creating new form API elements.  We nee a new fixed_value type
 * for webforms.
 */
function tripal_galaxy_element_info() {

  $elements['fixed_value'] = array(
    '#input' => 'TRUE',
    '#process' => array('tripal_galaxy_fixed_value_process'),
  );
  $elements['BDSS_file'] = array(
    '#input' => 'TRUE',
    '#process' => array('tripal_galaxy_BDSS_file_process'),
    '#element_validate' => array('tripal_galaxy_BDSS_file_validate'),
  );
  // A form element for uploading/selecting a single file.
  $elements['galaxy_sfile'] = array(
    '#input' => 'TRUE',
    '#process' => array('tripal_galaxy_sfile_process'),
    '#element_validate' => array('tripal_galaxy_sfile_validate'),
    '#value_callback' => 'tripal_galaxy_sfile_value',
  );
  // A form element for uploading/selecting a list of single files.
  $elements['galaxy_sflist'] = array(
    '#input' => 'TRUE',
    '#process' => array('tripal_galaxy_sflist_process'),
    '#element_validate' => array('tripal_galaxy_sflist_validate'),
    '#value_callback' => 'tripal_galaxy_sflist_value',
  );
  // A form element for uploading/selecting a paired file.
  $elements['galaxy_pfile'] = array(
    '#input' => 'TRUE',
    '#process' => array('tripal_galaxy_pfile_process'),
    '#element_validate' => array('tripal_galaxy_pfile_validate'),
    '#value_callback' => 'tripal_galaxy_pfile_value',
  );
  // A form element for uploading/selecting a list of paired files.
  $elements['galaxy_pflist'] = array(
    '#input' => 'TRUE',
    '#process' => array('tripal_galaxy_pflist_process'),
    '#element_validate' => array('tripal_galaxy_pflist_validate'),
    '#value_callback' => 'tripal_galaxy_pflist_value',
  );
  return $elements;
}

/**
 * Implements a theme for the the new fixed_value form API type.
 *
 * This field has a hidden value, title and markup description.
 */
function tripal_galaxy_fixed_value_process($element, $form_state, $complete_form) {

  // If the input type is 'linked' then we want to alter the way
  // the value is presented so it makes sense to the user.
  $value = $element['#markup'];
  if (array_key_exists('linked', $element['#webform_component']['extra']) and
      $element['#webform_component']['extra']['linked'] == TRUE) {
        list ($step, $output) = explode('|', $value);
        $value = 'For this input setting the ' . $output . ' file generated by step ' . ($step + 2) . ' is used.';
      }
      // We need to include a hidden field that contains the value so that
      // it works with webform conditionals.
      $element['details'] = array(
        '#type' => 'item',
        '#title' => $element['#title'],
        '#markup' => $value,
        '#title_display' => 'invisible',
      );
      $element['value'] = array(
        '#type' => 'hidden',
        '#value' => $element['#value'],
      );
      return $element;
}

/**
 * Implements the process hook for the galaxy_multi_upload form element.
 *
 * This function needs to be looking both at the select file and the html5
 * upload to see if files came from both components.
 */
function tripal_galaxy_sflist_process($element, $form_state, $complete_form) {

  global $user;
  $usage = tripal_galaxy_format_bytes(tripal_galaxy_get_user_usage($user->uid));
  $quota = tripal_galaxy_get_user_quota($user->uid);
  $quota = tripal_galaxy_format_bytes($quota->custom_quota);

  $allowed_types = array_key_exists('#allowed_types', $element) ? $element['#allowed_types'] : array();

  // We want to "inherit" the html5_file widget.
  $element = tripal_html5_file_process($element, $form_state, $complete_form);
  unset($element['html5_file_table']['#title']);
  unset($element['html5_file_table']['#description']);

  $element['description'] = array(
    '#type' => 'item',
    '#title' => $element['#title'] ? $element['#title'] : 'Data File',
    '#markup' =>  $element['#description'] . ' Note: you have currently used ' . $usage . ' of your ' . $quota . ' quota.',
    '#weight' => -15,
  );

  $files_list = array();
  $query = db_select('file_managed', 'FM');
  $query->fields('FM', array('fid'));
  $query->distinct();
  $query->condition('FM.uid', $user->uid);
  $query->innerJoin('file_usage', 'FU', "FU.fid = FM.fid and FU.module = 'tripal_galaxy'");
  $query->orderBy('FM.filename');
  $files = $query->execute();
  while ($fid = $files->fetchField()) {

    $file = file_load($fid);
    foreach ($allowed_types as $type) {
      if (preg_match('/\.' . $type . '$/', $file->filename)) {
        $files_list[$fid] = $file->filename . ' (' . tripal_galaxy_format_bytes($file->filesize) . ') ';
      }
    }
  }

  $element['existing'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#title' => t('Select Existing File(s)'),
    '#description' => t('Please select your file(s) if it already exists on this site.  Only files of the following types are listed: ' . implode(', ', $allowed_types)) . '.',
    '#options' => $files_list,
    '#weight' => -100,
  );

  $element['value'] = array(
    '#type' => 'hidden',
    '#default_value' => '',
  );

  return $element;
}
/**
 * Implements the validate hook for the galaxy_multi_upload element.
 * There needs to be a check on the extensions of the files uploaded
 */
function tripal_galaxy_sflist_validate($element, &$form_state) {

  // BUG: only looking @ the select box and not validating properly
  // i.e. will not only accept
  $is_required = $element['#required'];
  $fids = $element['#value'];

  $set = explode('|', $fids);

  if (count(array_unique($set)) != count($set)){
    form_error($element, t('Please ensure that there are no duplicated files.  A file may only be used once.'));
  }

  if ($is_required and count($set) == 0) {
    form_error($element, t('Please provide a file by uploading a new file or selecting an existing file.'));
  }
}
/**
 * Implements the value callback for the galaxy_multi_list element.
 * Order does not matter for the multi list
 */
function tripal_galaxy_sflist_value($element, $input = FALSE, &$form_state) {

  if ($input) {
    if (is_array($input)) {

      // Get any selected existing files.
      $eset = $input['existing'];

      // Get any uploaded files.
      $name = $element['#name'];
      $name = preg_replace('/[^\w]/', '_', $name);
      $ufids = $input[$name];
      $uset = explode('|', $ufids);

      // Merge the selected and uploaded files into a single value.
      $set = array_merge($eset, $uset);

      // Create the new combined value.
      $value = trim(implode('|', $set), '|');

      $name = $element['#name'];
      $name = preg_replace('/submitted/', "[submitted]", $name);
      $name = preg_replace('/\[/', "['", $name);
      $name = preg_replace('/\]/', "']", $name);
      $exp = '$form_state[\'input\']' . $name . '[\'value\'] = $value;';
      eval($exp);
      return $value;
    }
    else {
      return $input;
    }
  }
}

/**
 *
 */
function tripal_galaxy_BDSS_file_process($element, $form_state, $complete_form) {
  $file_URL = '';
  $fid = '';

  if (array_key_exists('values', $form_state)) {
    $file_URL = array_key_exists('file_URL', $form_state['values']) ? webform_filter_xss($form_state['input']['file_URL']) : '';
    $fid = array_key_exists('file_upload', $form_state['values']) ? webform_filter_xss($form_state['input']['file_upload']) : '';
  }
  $element['instructions'] = array(
    '#type' => 'item',
    '#markup' => array_key_exists('description', $element) ? $element['description'] : t('Please provide a URL for the file on a remote server or upload the file.'),
    '#title_display' => 'invisible',
  );
  $element['file_URL'] = array(
    '#type' => 'textfield',
    '#default_value' => $file_URL,
    '#description' => 'File URL',
    '#title_display' => 'invisible',
  );
  $element['file_upload'] = array(
    '#type' => 'managed_file',
    '#default_value' => $fid,
    '#description' => 'Upload a file',
    '#title_display' => 'invisible',
  );

  return $element;
}

/**
 *
 */
function tripal_galaxy_BDSS_file_validate($element, $form_state) {
  $is_required = $element['#webform_component']['required'];
  $file_URL = $element['file_URL']['#value'];
  $file_upload = $element['file_upload']['#value'];

  if (is_array($file_upload)) {
    $file_upload = $element['file_upload']['#value']['fid'];
  }
  if ($file_URL and $file_upload) {
    form_error($element, t('Please select a file URL or upload a file but not both.'));
  }

  if (!$file_upload and $file_URL and !valid_url($file_URL, TRUE)) {
    form_error($element['file_URL'], t('The URL is not valid. Please check for errors.'));
  }

  if ($is_required and !$file_URL and !$file_upload) {
    form_error($element, t('Please provide a file URL or upload a file.'));
  }
}



/**
 * Implements the process hook for the galaxy_multi_upload form element.
 */
function tripal_galaxy_sfile_process($element, $form_state, $complete_form) {

  global $user;
  $usage = tripal_galaxy_format_bytes(tripal_galaxy_get_user_usage($user->uid));
  $quota = tripal_galaxy_get_user_quota($user->uid);
  $quota = tripal_galaxy_format_bytes($quota->custom_quota);


  $allowed_types = array_key_exists('#allowed_types', $element) ? $element['#allowed_types'] : array();

  // We want to "inherit" the html5_file widget.
  $element = tripal_html5_file_process($element, $form_state, $complete_form);
  unset($element['html5_file_table']['#title']);
  unset($element['html5_file_table']['#description']);

  $element['description'] = array(
    '#type' => 'item',
    '#title' => $element['#title'] ? $element['#title'] : 'Data File',
    '#markup' =>  $element['#description'] . ' Note: you have currently used ' . $usage . ' of your ' . $quota . ' quota.',
    '#weight' => -15,
  );


  $files_list = array();
  $files_list[] = '-- Select a File --';
  $query = db_select('file_managed', 'FM');
  $query->fields('FM', array('fid'));
  $query->distinct();
  $query->condition('FM.uid', $user->uid);
  $query->innerJoin('file_usage', 'FU', "FU.fid = FM.fid and FU.module = 'tripal_galaxy'");
  $query->orderBy('FM.filename');
  $files = $query->execute();
  while ($fid = $files->fetchField()) {
    $file = file_load($fid);
    foreach ($allowed_types as $type) {
      if (preg_match('/\.' . $type . '$/', $file->filename)) {
        $files_list[$fid] = $file->filename . ' (' . tripal_galaxy_format_bytes($file->filesize) . ') ';
      }
    }
  }
  $element['existing'] = array(
    '#type' => 'select',
    '#title' => t('Select an Existing File'),
    '#description' => t('Please select your file if it already exists on this site.  Only files of the following types are listed: ' . implode(', ', $allowed_types)) . '.',
    '#options' => $files_list,
    '#weight' => -10,
  );

  return $element;
}
/**
 * Implements the validate hook for the galaxy_multi_upload element.
 */
function tripal_galaxy_sfile_validate($element, &$form_state) {
  $is_required = $element['#required'];
  $fid = $element['#value'];

  if ($is_required and !$fid) {
    form_error($element, t('Please provide a file by uploading a new file or selecting an existing file.'));
  }
}
/**
 * Implements the value callback for the galaxy_multi_upload element.
 */
function tripal_galaxy_sfile_value($element, $input = FALSE, &$form_state) {
  if ($input) {
    if (is_array($input)) {
      $name = $element['#name'];
      $name = preg_replace('/[^\w]/', '_', $name);
      $fid = $input[$name];
      if (!$fid) {
        $fid = $input['existing'];
      }
      return $fid;
    }
    else {
      return $input;
    }
  }
}


/**
 * Implements the process hook for the galaxy_multi_upload form element.
 */
function tripal_galaxy_pflist_process($element, $form_state, $complete_form) {

  global $user;
  $usage = tripal_galaxy_format_bytes(tripal_galaxy_get_user_usage($user->uid));
  $quota = tripal_galaxy_get_user_quota($user->uid);
  $quota = tripal_galaxy_format_bytes($quota->custom_quota);


  $allowed_types = array_key_exists('#allowed_types', $element) ? $element['#allowed_types'] : array();

  // We want to "inherit" the html5_file widget.
  $element = tripal_html5_file_process($element, $form_state, $complete_form);
  $element['html5_file_table']['#title'] = t('File Upload');
  $element['html5_file_table']['#description'] = t('If your files do not already exist above please upload as many pair of files as desired.');

  $element['description'] = array(
    '#type' => 'item',
    '#title' => $element['#title'] ? $element['#title'] : 'Data File',
    '#markup' =>  $element['#description'] . ' Note: you have currently used ' . $usage . ' of your ' . $quota . ' quota.',
    '#weight' => -15,
  );

  $files_list = array();
  $files_list[] = '-- Select a File --';
  $query = db_select('file_managed', 'FM');
  $query->fields('FM', array('fid'));
  $query->distinct();
  $query->condition('FM.uid', $user->uid);
  $query->innerJoin('file_usage', 'FU', "FU.fid = FM.fid and FU.module = 'tripal_galaxy'");
  $query->orderBy('FM.filename');
  $files = $query->execute();
  while ($fid = $files->fetchField()) {
    $file = file_load($fid);
    foreach ($allowed_types as $type) {
      if (preg_match('/\.' . $type . '$/', $file->filename)) {
        $files_list[$fid] = $file->filename . ' (' . tripal_galaxy_format_bytes($file->filesize) . ') ';
      }
    }
  }

  // Generate the ID that will be used for the table.
  $existing_table_id = $element['#name'];
  $existing_table_id = strtolower(preg_replace('/[^\w]/', '-', $existing_table_id)) . '-selected-files-table';

  $existing_value_id =  $element['#name'];
  $existing_value_id = strtolower(preg_replace('/[^\w]/', '-', $existing_value_id)) . '-existing';
  $existing_1_select_id =$existing_value_id . '-1';
  $existing_2_select_id =$existing_value_id . '-2';

  $element['existing'] = array(
    '#type' => 'hidden',
    '#default_value' => '',
    '#attributes' => array(
      'id' => $existing_value_id,
    ),
  );
  $element['existing_1'] = array(
    '#type' => 'select',
    '#title' => t('Select File of 1 of 2'),
    '#description' => t('Please select the first pair file, or upload a file
        below. After the file is selected it will disappear from the dropdown
        and appear in the table below. You may select as many files as desired.
        Only files of the following types are listed: ' . implode(', ', $allowed_types)) . '.',
    '#options' => $files_list,
    '#weight' => -10,
    '#attributes' => array(
      'class' => array('tripal-galaxy-existing-pfile'),
      'table_id' => $existing_table_id,
      'target_id' => $existing_value_id,
      'which_pair' => 1
    )
  );
  $element['existing_2'] = array(
    '#type' => 'select',
    '#title' => t('Select File of 2 of 2'),
    '#description' => t('Please select the second pair file, or upload a file
        below. After the file is selected it will disappear from the dropdown and
        appear in the table below. You may select as many files as desired.
        Only files of the following types are listed: ' . implode(', ', $allowed_types)) . '.',
    '#options' => $files_list,
    '#weight' => -10,
    '#attributes' => array(
      'class' => array('tripal-galaxy-existing-pfile'),
      'table_id' => $existing_table_id,
      'target_id' => $existing_value_id,
      'which_pair' => 2
    )
  );

  $headers = array('Pair', 'File 1', 'File 2', '');
  $rows = array();
  $element['selected_files_table'] = array(
    '#type' => 'item',
    '#title' => 'Selected Files',
    '#markup' => theme_table(array(
      'header' => $headers,
      'rows' => $rows,
      'attributes' => array(
        'id' => array($existing_table_id)
      ),
      'caption' => '',
      'colgroups' => array(),
      'sticky' => TRUE,
      'empty' => t('There are no files.')
    )),
    '#weight' => -5,
    '#description' => t('Please click the files in the boxes above to add
        them to this table.  Only files that appear in this table will
        be used for the analysis.  Paired files should appear on the same
        row of the table.')
  );
  return $element;
}
/**
 * Implements the validate hook for the galaxy_multi_upload element.
 */
function tripal_galaxy_pflist_validate($element, &$form_state) {
  $is_required = $element['#required'];
  $fids = $element['#value'];

  list($set1, $set2) = explode(',', $fids);
  $set1 = $set1 ? explode('|', $set1) : array();
  $set2 = $set2 ? explode('|', $set2) : array();

  if (count($set1) != count($set2)) {
    form_error($element, t('There are an uneven number of paired files. .'));
  }

  if (count(array_unique(array_merge($set1, $set2))) != count($set1) + count($set2)){
    form_error($element, t('Please ensure that there are no duplicated files.  A file may only be used once.'));
  }

  if ($is_required and count(array_merge($set1, $set2)) == 0) {
    form_error($element, t('Please provide a file by uploading a new file or selecting an existing file.'));
  }

}
/**
 * Implements the value callback for the galaxy_multi_upload element.
 */
function tripal_galaxy_pflist_value($element, $input = FALSE, &$form_state) {
  if ($input) {

    if (is_array($input)) {

      // Get any selected existing files.
      $efids = $input['existing'];
      $eset1 = array();
      $eset2 = array();
      if ($efids) {
        list($eset1, $eset2) = explode(',', $efids);
        $eset1 = explode('|', $eset1);
        $eset2 = explode('|', $eset2);
      }

      // Get any uploaded files.
      $name = $element['#name'];
      $name = preg_replace('/[^\w]/', '_', $name);
      $ufids = $input[$name];
      $uset1 = array();
      $uset2 = array();
      if ($ufids) {
        list($uset1, $uset2) = explode(',', $ufids);
        $uset1 = explode('|', $uset1);
        $uset2 = explode('|', $uset2);
      }

      // Merge the selected and uploaded files into a single value.
      $set1 = array_merge($eset1, $uset1);
      $set2 = array_merge($eset2, $uset2);

      // Create the new combined value.
      return trim(implode('|', $set1), '|') . ',' . trim(implode('|', $set2), '|');
    }
    else {
      return $input;
    }
  }
}
