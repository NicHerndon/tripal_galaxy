<?php

/**
 * @file
 * @galaxy
 * Installation of the galaxy module
 */

/**
 * Implementation of hook_schema().
 *
 * @ingroup tripal_galaxy
 */
function tripal_galaxy_schema() {
  $schema = array();

  tripal_galaxy_add_galaxy_table($schema);
  tripal_galaxy_add_workflow_table($schema);
  tripal_galaxy_add_workflow_submission_table($schema);
  tripal_galaxy_add_site_wide_files_table($schema);
  tripal_galaxy_add_webform_table($schema);
  tripal_galaxy_add_workflow_settings_table($schema);

  return $schema;
}

/**
 * Adds the 'tripal_galaxy' table to Drupal schema.
 *
 * @ingroup tripal_galaxy
 */
function tripal_galaxy_add_galaxy_table(&$schema) {
  $schema['tripal_galaxy'] = array(
    'table' => 'tripal_galaxy',
    'fields' => array(
      'galaxy_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'url' => array(
        'type' => 'text',
      ),
      'uid' => array(
        'type' => 'int',
      ),
      'save_auth' => array(
        'type' => 'int',
        'size' => 'tiny',
        'default' => 1,
      ),
      'username' => array(
        'type' => 'varchar',
        'length ' => 128,
      ),
      'api_key' => array(
        'type' => 'varchar',
        'length ' => 1024,
      ),
      'servername' => array(
        'type' => 'varchar',
        'length ' => 1024,
      ),
      'description' => array(
        'type' => 'text',
      ),
      'serverstatus' => array(
        'type' => 'varchar',
        'length ' => 1024,
      ),
    ),
    'primary key' => array(
      0 => 'galaxy_id',
    ),
    'unique keys' => array(
      'tripal_galaxy_servername' => array(
        'servername',
      ),
    ),
  );
}

/**
 * Add workflow submission table, the table responsible for recording submitted
 * Workflow data.
 *
 * @param unknown $schema
 */
function tripal_galaxy_add_workflow_submission_table(&$schema) {
  $schema['tripal_galaxy_workflow_submission'] = array(
    'table' => 'tripal_galaxy_workflow_submission',
    'fields' => array(
      'sid' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'The Drupal User ID of the user submitting the workflow.',
      ),
      'galaxy_workflow_id' => array(
        'type' => 'int',
      ),
      'errors' => array(
        'type' => 'text',
      ),
      'status' => array(
        'type' => 'varchar',
        'length' => 50,
        'default' => 'Waiting',
      ),
      'submit_date' => array(
        'type' => 'int',
        'description' => 'UNIX integer submit time',
      ),
      'start_time' => array(
        'type' => 'int',
        'description' => 'UNIX integer start time',
      ),
      'end_time' => array(
        'type' => 'int',
        'description' => 'UNIX integer end time',
      ),
      'invocation_id' => array(
        'type' => 'varchar',
        'length' => 128,
        'description' => 'Galaxy provides an invocation ID that can be used ' . 'to check the status of a submitted workflow.',
      ),
      'email' => array(
        'type' => 'varchar',
        'length' => 128,
        'description' => 'Flag if notification email has been sent',
      ),
    ),
    'indexes' => array(
      'sid' => array(
        'sid',
      ),
      'galaxy_workflow_id' => array(
        'galaxy_workflow_id',
      ),
    ),
    'unique' => array(
      'sid_uq1' => array(
        'sid',
      ),
    ),
  );
}

/**
 * Adds the 'tripal_galaxy_workflow' table to Drupal schema.
 */
function tripal_galaxy_add_workflow_table(&$schema) {
  $schema['tripal_galaxy_workflow'] = array(
    'table' => 'tripal_galaxy_workflow',
    'fields' => array(
      'galaxy_workflow_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'nid' => array(
        'type' => 'int',
      ),
      'galaxy_id' => array(
        'type' => 'int',
      ),
      'status' => array(
        'type' => 'varchar',
        'length' => 1024,
        'default' => 'Active',
      ),
      'workflow_id' => array(
        'type' => 'varchar',
        'length' => 128,
        'description' => 'The ID of the workflow on the Galaxy server.',
      ),
      'workflow_uuid' => array(
        'type' => 'varchar',
        'length' => 1024,
        'description' => 'Each Galaxy workflow has a unique UUID nad each time ' . 'the workflow is changed the UUID changes. This way we can ensure that ' . 'workflows are disabled if the UUID changes.',
      ),
      'workflow_name' => array(
        'type' => 'text',
      ),
    ),
    'primary key' => array(
      0 => 'galaxy_workflow_id',
    ),
    'unique keys' => array(
      'tripal_galaxy_workflow_uq1' => array(
        'galaxy_id',
        'workflow_id',
        'workflow_uuid',
      ),
    ),
  );
}

/**
 *
 */
function tripal_galaxy_add_site_wide_files_table(&$schema) {
  $schema['tripal_galaxy_site_files'] = array(
    'table' => 'tripal_galaxy_site_files',
    'fields' => array(
      'swfid' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'fid' => array(
        'type' => 'int',
      ),
      'url' => array(
        'type' => 'text',
      ),
      'filename' => array(
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
      ),
      'short_desc' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'filetype' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'enabled' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array(
      0 => 'swfid',
    ),
    'unique keys' => array(
      'uq1' => array(
        'url',
      ),
      'uq2' => array(
        'fid',
      ),
    ),
    'indexes' => array(
      'idx1' => array(
        'filetype',
      ),
    ),
  );
}

/**
 * Linker table between tripal_galaxy_workflow_submission and
 * webform_submissions.
 */
function tripal_galaxy_add_webform_table(&$schema) {
  $schema['tripal_galaxy_webform'] = array(
    'table' => 'tripal_galaxy_webform',
    'fields' => array(
      'wf_sid' => array(
        'type' => 'int',
      ),
      'tg_sid' => array(
        'type' => 'int',
      ),
    ),
    'primary key' => array(
      0 => 'wf_sid',
    ),
  );
}

/**
 * Adds the 'tripal_galaxy' table to Drupal schema.
 *
 * @ingroup tripal_galaxy
 */
function tripal_galaxy_add_workflow_settings_table(&$schema) {
  $schema['tripal_galaxy_workflow_settings'] = array(
    'table' => 'tripal_galaxy_workflow_settings',
    'fields' => array(
      'setting_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'workflow_id' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'setting_name' => array(
        'type' => 'varchar',
        'length ' => 128,
        'not null' => TRUE,
      ),
      'value' => array(
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array(
      0 => 'setting_id',
    ),
    'unique keys' => array(
      'tripal_galaxy_workflow_settings_uq1' => array(
        'workflow_id', 'setting_name',
      ),
    ),
  );
}

/**
 * Implements hook_requirements().
 */
function tripal_galaxy_requirements($phase) {
  $requirements = array();
  if ($phase == 'install') {
    if (!module_exists('tripal_core') and !module_exists('tripal')) {
      $requirements['tripal_galaxy'] = array(
        'title' => "tripal_galaxy",
        'value' => "ERROR: You must have Tripal v2 or v3 installed to use this module.",
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}

/**
 *
 */
function tripal_galaxy_uninstall() {
  // Remove the db tables that this installed.
  drupal_uninstall_schema('tripal_galaxy');
  db_drop_table('tripal_galaxy');
  db_drop_table('tripal_galaxy_workflow');
  db_drop_table('tripal_galaxy_workflow_submission');
  db_drop_table('tripal_galaxy_webform');
}

/**
 * This update previously added support for file quotas, but that code has been
 * moved to the core Tripal.
 * Therefore, this update does nothing now.
 */
function tripal_galaxy_update_7100() {
  try {
    // Do nothing.
  }
  catch (\PDOException $e) {
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not perform update: ' . $error);
  }
}

/**
 * Adds support for site-wide files.
 */
function tripal_galaxy_update_7101() {
  try {
    $schema = array();
    tripal_galaxy_add_site_wide_files_table($schema);
    db_create_table('tripal_galaxy_site_files', $schema['tripal_galaxy_site_files']);
  }
  catch (\PDOException $e) {
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not perform update: ' . $error);
  }
}

/**
 * This update previously added support for file quotas, but that code has been
 * moved to the core Tripal.
 * Therefore, this update does nothing now.
 */
function tripal_galaxy_update_7102() {
  try {
    // Do nothing.
  }
  catch (\PDOException $e) {
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not update the tripal_galaxy_custom_quota table: ' . $error);
  }
}

/**
 * This update adds the serverstatus column to the tripal_galaxy table.
 */
function tripal_galaxy_update_7103() {
  try {
    $status = array(
      'type' => 'varchar',
      'length ' => 1024,
    );
    db_add_field('tripal_galaxy', 'serverstatus', $status);
  }
  catch (\PDOException $e) {
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not update the tripal_galaxy table: ' . $error);
  }
}

/**
 * This update adds the tripal_galaxy_webform linker table and moves existing
 * sids for backwards compatibility.
 */
function tripal_galaxy_update_7104() {
  try {
    $schema = array();
    tripal_galaxy_add_webform_table($schema);
    db_create_table('tripal_galaxy_webform', $schema['tripal_galaxy_webform']);

    // Move the data over to the new table.
    $sql = "SELECT * FROM tripal_galaxy_workflow_submission";
    $entries = db_query($sql);
    while ($entry = $entries->fetchObject()) {
      if ($entry->sid === NULL) {
        continue;
      }
      try {
        db_insert('tripal_galaxy_webform')->fields(array(
          'wf_sid' => $entry->sid,
          'tg_sid' => $entry->sid,
        ))->execute();
      }
      catch (\PDOException $e) {
        $error = $e->getMessage();
        throw new DrupalUpdateException('Could not copy the data into the new linker table: ' . $error);
      }
    }

    // Now that everything is moved change the existing sid field to a serial.
    // On PostgreSQL, changing a field definition involves adding a new field
    // and dropping an old one.
    try {
      $holder = array(
        'type' => 'int',
        'length ' => 1024,
      );
      db_add_field('tripal_galaxy_workflow_submission', 'sid_linker', $holder);
    }
    catch (\PDOException $e) {
      $error = $e->getMessage();
      throw new DrupalUpdateException('Could not insert the column into the tripal_galaxy_workflow_submission table: ' . $error);
    }

    // Copy the data into a holder column, delete old column, create new column,
    // update tg_sid mapping. This should finish the update to that field.
    try {
      $copy_sql = "UPDATE tripal_galaxy_workflow_submission SET sid_linker = sid";
      $copied = db_query($copy_sql);
      if ($copied) {
        db_drop_field('tripal_galaxy_workflow_submission', 'sid');
        if (!db_field_exists('tripal_galaxy_workflow_submission', 'sid')) {
          $status = array(
            'type' => 'serial',
          );
          db_add_field('tripal_galaxy_workflow_submission', 'sid', $status);
        }
        if (db_field_exists('tripal_galaxy_workflow_submission', 'sid')) {
          // Now we need to update tripal_galaxy_webform.tg_sid field.
          $sql = "SELECT * FROM tripal_galaxy_workflow_submission";
          $entries = db_query($sql);
          while ($entry = $entries->fetchObject()) {
            if ($entry->sid_linker === NULL) {
              continue;
            }
            $updated_sid = db_update('tripal_galaxy_webform')->fields(array(
              'tg_sid' => $entry->sid,
            ))
              ->condition('wf_sid', $entry->sid_linker, '=')
              ->execute();
          }
        }
        if ($copied) {
          db_drop_field('tripal_galaxy_workflow_submission', 'sid_linker');
        }
      }
    }
    catch (\PDOException $e) {
      $error = $e->getMessage();
      throw new DrupalUpdateException('Could not update the tripal_galaxy table: ' . $error);
    }
  }
  catch (\PDOException $e) {
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not update the tripal_galaxy table: ' . $error);
  }
}

/**
 * This update adds the email column to the tripal_galaxy_workflow submission
 * table.
 */
function tripal_galaxy_update_7106() {
  try {
    $email = array(
      'type' => 'varchar',
      'length' => 128,
      'description' => 'Flag if notification email has been sent',
    );
    db_add_field('tripal_galaxy_workflow_submission', 'email', $email);
  }
  catch (\PDOException $e) {
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not update the tripal_galaxy table: ' . $error);
  }
}

/**
 * This update adds the uid column to the tripal_galaxy_workflow submission
 * table.
 */
function tripal_galaxy_update_7107() {
  $transaction = db_transaction();
  try {

    if (!db_field_exists('tripal_galaxy_workflow_submission', 'uid')) {
      // Add the field but don't allow it to have null's for now. We'll try to
      // add those in.
      $uid = array(
        'type' => 'int',
        'description' => 'The Drupal User ID of the user submitting the workflow.',
      );
      db_add_field('tripal_galaxy_workflow_submission', 'uid', $uid);
    }


    // If there are any missing UIDs (which there should be if the uid
    // field was added by this update. Then try to get the UID from
    // webform submissions first and then from the history name second.
    $query = db_select('tripal_galaxy_workflow_submission', 'tgws');
    $query->fields('tgws', ['sid', 'errors']);
    $query->leftJoin('tripal_galaxy_webform', 'tgw', 'tgws.sid = tgw.tg_sid');
    $query->leftJoin('webform_submissions', 'ws', 'ws.sid = tgw.wf_sid');
    $query->fields('ws', ['uid']);
    $query->isNull('tgws.uid');
    $results = $query->execute();

    // Iterate through the submissions.
    while ($submission = $results->fetchObject()) {
      // First try setting the UID from the webform submission UID.
      $sid = $submission->sid;
      $uid = $submission->uid;

      // Second, if there is no UID then see if there are any errors.
      if (!$uid and is_array($submission->errors) and array_key_exists('history', $submission->errors)) {
        $errors = unserialize($submission->errors);
        $history_name = $errors['history']['name'];
        $matches = [];
        if (preg_match('/^TG-(\d+?)-.*$/', $history_name, $matches)) {
          $uid = $matches[1];
        }
      }

      // Third, if we can't find a UID for the submission set it to be owned by
      // the site admin.
      else {
        $uid = 1;
      }
      db_update('tripal_galaxy_workflow_submission')
        ->fields(['uid' => $uid])
        ->condition('sid', $sid)
        ->execute();
    }

    // Now that we're all done we want to set the uid field to not allow
    // NULLs.
    db_change_field('tripal_galaxy_workflow_submission', 'uid', 'uid', [
      'not null' => TRUE,
      'type' => 'int',
      'description' => 'The Drupal User ID of the user submitting the workflow.',
    ]);
  }
  catch (\PDOException $e) {
    $transaction->rollback();
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not update the tripal_galaxy table: ' . $error);
  }
}

/**
 * Adds the tripal_galaxy_workflow_settings table.
 */
function tripal_galaxy_update_7108() {
  try {
    $schema = array();
    tripal_galaxy_add_workflow_settings_table($schema);
    db_create_table('tripal_galaxy_workflow_settings', $schema['tripal_galaxy_workflow_settings']);
  }
  catch (\PDOException $e) {
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not perform update: ' . $error);
  }
}