<?php
/**
 * @file
 *
 */

require ('theme/tripal_galaxy.theme.inc');
require ('api/tripal_galaxy.api.inc');

/**
 * Implementation of hook_init()
 */
function tripal_galaxy_init() {
  global $user;

  $library = libraries_detect('blend4php');
  if (user_access('administer galaxy', $user)) {
    if (!$library) {
      drupal_set_message(t('The blend4php library is not installed. The Galaxy module requires it.'), 'warning');
    }
  }
}



/**
 * Implements hook_libraries_info().
 *
 * For defining external libraries.
 */
function tripal_galaxy_libraries_info() {

  // A very simple library. No changing APIs (hence, no versions), no variants.
  // Expected to be extracted into 'sites/all/libraries/simple'.
  $libraries['blend4php'] = array(
    'name' => 'blend4php',
    'vendor url' => 'https://github.com/galaxyproject/blend4php',
    'download url' => 'https://github.com/galaxyproject/blend4php',
    'version arguments' => array(
      'file' => 'version.txt',
      'pattern' => '/^(.*)$/',
      'lines' => 1,
    ),
    'files' => array(
      'php' => array('galaxy.inc'),
    ),
  );

  return $libraries;
}


/**
 * Implementation of hook_permissions()
 *
 * Set the permission types that this module uses.
 *
 * @ingroup tripal_file
 */
function tripal_galaxy_permission() {
  return array (
    'use galaxy' => array (
      'title' => t ( 'Execute Published Galaxy Workflows' ),
      'description' => t ( 'Allows a user to submit a published workflow for execution on a remote Galaxy Instance' )
    ),
    'administer galaxy' => array (
      'title' => t ( 'Administer Galaxy' ),
      'description' => t ( 'Allows a user to configure site-wide default Galaxy instances.' )
    )
  );
}

/**
 * Implements hook_menu()
 *
 * Specifies menu items and URLs used by this module.
 *
 * @ingroup tripal_galaxy
 */
function tripal_galaxy_menu() {
  $items = array ();

  // EXPLANATION: all extension modules should have an administrative menu item
  // with the path set to 'admin/tripal/extension/[module name]'.
  $items['admin/tripal/extension/galaxy'] = array (
    'title' => 'Galaxy',
    'description' => 'Integrate workflows from a remote Galaxy instance with this Tripal site',
    'page callback' => 'tripal_galaxy_admin_home',
    'access arguments' => array('administer galaxy'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path ('module', 'tripal_galaxy')
  );

  // Edit Galaxy
  $items['admin/tripal/extension/galaxy/edit/%'] = array (
    'description' => 'Edit a galaxy instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array ('tripal_galaxy_admin_configuration_form', 5),
    'access arguments' => array ('administer galaxy'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin_configuration_form.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy')
  );

  // Test Galaxy
  $items['admin/tripal/extension/galaxy/test/%'] = array (
    'description' => 'Test a galaxy instance',
    'page callback' => 'tripal_galaxy_admin_test_server',
    'page arguments' => array (5),
    'access arguments' => array ('administer galaxy'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy')
  );

  // Add Galaxy
  $items['admin/tripal/extension/galaxy/add'] = array (
    'description' => 'Add a galaxy server instance',
    'title' => 'Add Galaxy Instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tripal_galaxy_admin_configuration_form'),
    'access arguments' => array('administer galaxy'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/tripal_galaxy.admin_configuration_form.inc',
    'file path' => drupal_get_path ( 'module', 'tripal_galaxy' )
  );

  // Available Workflows
  $items['admin/tripal/extension/galaxy/workflows'] = array(
    'title' => 'Workflows',
    'description' => 'Lists the available Workflows of the user',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tripal_galaxy_admin_workflows_form'),
    'access arguments' => array('administer galaxy'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tripal_galaxy.admin_workflow_form.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
    'weight' => 5,
  );

  // Add Workflows
  $items['admin/tripal/extension/galaxy/workflows/add'] = array(
    'title' => 'Add Workflows',
    'description' => 'Add workflows to the site given the remote galaxy instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tripal_galaxy_admin_add_workflow_form'),
    'access arguments' => array('administer galaxy'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/tripal_galaxy.admin_workflow_form_add.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy' ),
  );

  // Remove Workflows
  $items['admin/tripal/extension/galaxy/workflows/remove/%'] = array (
    'description' => 'Remove a workflow from site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tripal_galaxy_admin_confirm_remove_workflow_form', 6),
    'access arguments' => array('administer galaxy'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
    'weight' => 10,
  );

  // Admin submission report.
  $items['admin/tripal/extension/galaxy/workflows/report/%'] = array (
    'title' => 'Workflow Submission Details',
    'description' => 'The report for a submitted workflow.',
    'page callback' => 'tripal_galaxy_submission_admin_report',
    'page arguments' => array(6),
    'access arguments' => array('administer galaxy'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
    'weight' => 10,
  );

  // User submission report.
  $items['user/%/galaxy-jobs/%'] = array (
    'title' => 'Workflow Submission Details',
    'description' => 'The report for a submitted workflow.',
    'page callback' => 'tripal_galaxy_submission_user_report',
    'page arguments' => array(3),
    'access arguments' => array('view content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
    'weight' => 10,
  );

  //Usage
  $items['admin/tripal/extension/galaxy/usage'] = array (
    'title' => 'Usage',
    'description' => 'View Usage of Galaxy Workflows',
    'page callback' => 'tripal_galaxy_admin_usage_page',
    'access arguments' => array('administer galaxy'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tripal_galaxy.admin_usage.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
    'weight' => 20,
  );
  // submission queue


 // Edit workflow submission
  // $items['admin/tripal/extension/galaxy/submitted/view/%'] = array (
  //   'description' => 'Edit a galaxy instance',
  //   'page callback' => 'tripal_galaxy_submission_view',
  //   'page arguments' => array (6),
  //   'access arguments' => array ('administer galaxy'),
  //   'type' => MENU_CALLBACK,
  //   'file' => 'includes/tripal_galaxy.admin_queue.inc',
  //   'file path' => drupal_get_path ( 'module', 'tripal_galaxy' )
  // );

  // Workflow
  // $items['workflows'] = array (
  //   'title' => 'Available Workflows',
  //   'description' => 'A list of available analytical workflows for this site',
  //   // Are we sure about this?
  //   'page callback' => 'test_webforms',
  //   'access arguments' => array (
  //     'administer galaxy'
  //   ),
  //   'type' => MENU_LOCAL_TASK,
  //   'file' => 'includes/tripal_galaxy.user.inc',
  //   'file path' => drupal_get_path ( 'module', 'tripal_galaxy' )
  // );

  // Galaxy
  $items['user/galaxy'] = array (
    'title' => 'Galaxy',
    'description' => 'Configure Galaxy Server',
    // Are we sure about this?
    'page callback' => 'drupal_get_form',
    'page arguments' => 'tripal_galaxy_user_configuration_form',
    'access arguments' => array (
      'use galaxy'
    ),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tripal_galaxy.user.inc',
    'file path' => drupal_get_path ( 'module', 'tripal_galaxy' )
  );

  return $items;
}

/**
 * Implements hook_views_api()
 *
 * This hook tells drupal that there is views support for
 * for this module which then automatically includes the tripal_db.views.inc
 * where all the views integration code is found.
 *
 * @ingroup tripal_galaxy
 */
function tripal_galaxy_views_api() {
  return array (
    'api' => 3.0
  );
}

/**
 *  We need to let drupal know about our theme functions and their arguments.
 *  We create theme functions to allow users of the module to customize the
 *  look and feel of the output generated in this module
 *
 * @ingroup tripal_galaxy
 */
function tripal_galaxy_theme($existing, $type, $theme, $path) {
  $items = array (
    'tripal_galaxy_admin_add_workflow_form_rows' => array (
      'render element' => 'form'
    ),
    'tripal_galaxy_admin_workflows_form_rows' => array(
      'render element' => 'form'
    ),
  );
  return $items;
}

/**
 * Implements hook_[form_id]_alter().
 *
 * Add a submit handler to the client webform form.
 */
function tripal_galaxy_form_webform_client_form_alter(&$form, &$form_state, $form_id ) {
  // Check if this particular webform really is a galaxy webform
  // At each 'turn of the page' of the particular webform this is being called
  if($form['#node']->webform['components'][1]['form_key'] == 'galaxy_webform'){
    $form['#submit'][] = 'tripal_galaxy_webform_client_form_submit';
  }
}

/**
 * Implements submit function for the webform_client_form
 */
function tripal_galaxy_webform_client_form_submit($form, &$form_state) {

  // Don't do anything if the webform isn't finished being filled out.
  if ($form_state['webform_completed'] != TRUE) {
    return;
  }
  try {
    // Get the Galaxy server workflow ID from the form then
    // lookup our internal galaxy workflow ID.
    $workflow_id = $form['#node']->webform['components'][1]['extra']['workflow_id'];
    $workflow = db_select('tripal_galaxy_workflow', 'tgw')
      ->fields('tgw')
      ->condition('workflow_id', $workflow_id)
      ->execute()
      ->fetchObject();

    // To be implemented more properly once inputs are generated
    $data = array(
      'sid' => $form_state['storage']['details']['sid'],
      'galaxy_workflow_id' => $workflow->galaxy_workflow_id,
      'errors' => '',
      'submit_date' => REQUEST_TIME,
      'status' => 'Waiting',
    );

    // Now insert the submission into the database
    drupal_write_record('tripal_galaxy_workflow_submission', $data);

  }
  catch (Exception $e) {
    drupal_set_message(t('Could not copmlete workflow submission.  Please contact the web site to report this issue.'), 'error');
    watchdog_exception('tripal_galaxy', $e);
  }
  drupal_set_message(t('Your job is successfully submitted to the job queue! You will be notified by email when your job begins and completes.'));
  drupal_goto('/');
}

/**
 * A helper function for recursively building a values array.
 *
 * The values array is needed to invoke a Galaxy workflow.
 *
 * @param $values
 *   The array into which the value will be placed.
 * @param $input_full_name
 *   The full name of the input paramter.
 * @param $value
 *   The value to add to the array.
 */
function _tripal_galaxy_workflow_invoke_build_values(&$values, $input_full_name, $value) {
  // Pop the first name off the list.
  $names = explode('|', $input_full_name);
  $name = array_shift($names);

  // As long as we have names in our "name path" then recurse.
  if (count($names) > 0) {
    if (!array_key_exists($name, $values)) {
      $values[$name] = array();
    }
    $next_name = implode("|", $names);
    return _tripal_galaxy_workflow_invoke_build_values($values[$name], $next_name, $value);
  }
  else {
    $values[$name] = $value;
  }
}


/**
 * Implements of hook_webform_component_info().
 *
 * Describes new components for webforms that Galaxy workflows will use.
 */
function tripal_galaxy_webform_component_info() {
  $components = array();
  $components['BDSS_file'] = array(
    'label' => t('BDSS File'),
    'description' => t('Allows multiple paths (URL, upload, Tripal web services) that a file may be attached.'),
    'features' =>  array(
      'csv' => TRUE,
      'email' => FALSE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => FALSE,
      'title_display' => FALSE,
      'title_inline' => FALSE,
      'conditional' => TRUE,
      'group' => FALSE,
      'spam_analysis' => FALSE,
      'attachment' => FALSE,
      'conditional_action_set' => TRUE,
    ),
    'file' => 'includes/components/tripal_galaxy.BDSS_file.inc',
  );
  $components['fixed_value'] = array(
    'label' => t('Fixed Value'),
    'description' => t('A fixed value set by the workflow programmer.'),
    'features' =>  array(
      'csv' => TRUE,
      'email' => FALSE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => FALSE,
      'title_display' => FALSE,
      'title_inline' => FALSE,
      'conditional' => TRUE,
      'group' => FALSE,
      'spam_analysis' => FALSE,
      'attachment' => FALSE,
      'conditional_action_set' => TRUE,
    ),
    'file' => 'includes/components/tripal_galaxy.fixed_value.inc',
  );
  return $components;
}

/**
 * Implements hook_element_info().
 *
 * Used for creating new form API elements.  We nee a new fixed_value type
 * for webforms.
 */
function tripal_galaxy_element_info() {

  $elements['fixed_value'] = array(
    '#input' => 'TRUE',
    '#process' => array('tripal_galaxy_fixed_value_process'),
  );
  $elements['BDSS_file'] = array(
    '#input' => 'TRUE',
    '#process' => array('tripal_galaxy_BDSS_file_process'),
    '#element_validate' => array('tripal_galaxy_BDSS_file_validate'),
  );

  return $elements;
}
/**
 *
 */
function tripal_galaxy_BDSS_file_process($element, $form_state, $complete_form) {
  $file_URL = '';
  $fid = '';

  if (array_key_exists('values', $form_state)) {
    $file_URL = array_key_exists('file_URL', $form_state['values']) ? webform_filter_xss($form_state['input']['file_URL']) : '';
    $fid = array_key_exists('file_upload', $form_state['values']) ? webform_filter_xss($form_state['input']['file_upload']) : '';
  }
  $element['instructions'] = array(
    '#type' => 'item',
    '#markup' => array_key_exists('description', $element) ? $element['description'] : t('Please provide a URL for the file on a remote server or upload the file.'),
    '#title_display' => 'invisible',
  );
  $element['file_URL'] = array(
    '#type' => 'textfield',
    '#default_value' => $file_URL,
    '#description' => 'File URL',
    '#title_display' => 'invisible',
  );
  $element['file_upload'] = array(
    '#type' => 'managed_file',
    '#default_value' => $fid,
    '#description' => 'Upload a file',
    '#title_display' => 'invisible',
  );

  return $element;
}

/**
 *
 */
function tripal_galaxy_BDSS_file_validate($element, $form_state) {
  $is_required = $element['#webform_component']['required'];
  $file_URL = $element['file_URL']['#value'];
  $file_upload = $element['file_upload']['#value'];

  if (is_array($file_upload)) {
    $file_upload = $element['file_upload']['#value']['fid'];
  }
  if ($file_URL and $file_upload) {
    form_error($element, t('Please select a file URL or upload a file but not both.'));
  }

  if (!$file_upload and $file_URL and !valid_url($file_URL, TRUE)) {
    form_error($element['file_URL'], t('The URL is not valid. Please check for errors.'));
  }

  if ($is_required and !$file_URL and !$file_upload) {
    form_error($element, t('Please provide a file URL or upload a file.'));
  }
}

/**
 * Implements a theme for the the new fixed_value form API type.
 *
 * This field has a hidden value, title and markup description.
 */
function tripal_galaxy_fixed_value_process($element, $form_state, $complete_form) {

  // We need to include a hidden field that contains the value so that
  // it works with webform conditionals.
  $element['details'] = array(
    '#type' => 'item',
    '#title' => $element['#title'],
    '#markup' => $element['#markup'],
    '#title_display' => 'invisible',
  );
  $element['value'] = array(
    '#type' => 'hidden',
    '#value' => $element['#value'],
  );
  return $element;
}

/**
 * The report page for a galaxy workflow submission.
 *
 * @param  $sid
 *   The submission ID of the workflow.
 *
 */
function tripal_galaxy_workflow_report($sid) {


  if (!$sid) {
    return FALSE;
  }
  if (!is_numeric($sid)) {
    return FALSE;
  }

  // Create a galaxy logo clickable image.
  $galaxy_logo = l('<img src="' . url(drupal_get_path('module', 'tripal_galaxy') . '/theme/images/PoweredByGalaxy120.png') . '" border="0"></img>', "https://galaxyproject.org/", array('html' => TRUE, 'attributes' => array('target' => '_blank')));


  // Get the submission details.
  $query = db_select('tripal_galaxy_workflow_submission', 'tgws');
  $query->fields('tgws', array('galaxy_workflow_id', 'status', 'errors', 'submit_date', 'start_time', 'end_time'));
  $query->join('tripal_galaxy_workflow', 'tgw', 'tgw.galaxy_workflow_id = tgws.galaxy_workflow_id');
  $query->fields('tgw', array('nid', 'galaxy_id'));
  $query->condition('tgws.sid', $sid);
  $submission = $query->execute()->fetchObject();
  $submission->errors = unserialize($submission->errors);

  // Get the node that this workflow belongs to
  $node = node_load($submission->nid);

  // Does this user have access to this node?
  if(!node_access('view', $node)) {
    drupal_access_denied();
    module_invoke_all('exit');
    drupal_exit();
  }

  // Get the galaxy server
  $galaxy = db_select('tripal_galaxy', 'tg')
    ->fields('tg')
    ->condition('galaxy_id', $submission->galaxy_id)
    ->execute()
    ->fetchObject();

  $headers = array();
  $rows = array();

  $rows[] = array(
    array(
      'data' => 'Workflow Name',
      'header' => TRUE,
      'width' => '25%'
    ),
    $node->title,
  );
  $rows[] = array(
    array(
      'data' => 'Status',
      'header' => TRUE,
    ),
    $submission->status,
  );
  $rows[] = array(
    array(
      'data' => 'Submission date',
      'header' => TRUE,
    ),
    format_date($submission->submit_date),
  );
  $rows[] = array(
    array(
      'data' => 'Start Time',
      'header' => TRUE,
    ),
    $submission->start_time ? format_date($submission->start_time) : '',
  );
  $rows[] = array(
    array(
      'data' => 'End Time',
      'header' => TRUE,
    ),
    $submission->end_time ? format_date($submission->end_time) : '',
  );

  $rows[] = array(
    array(
      'data' => 'Galaxy Server',
      'header' => TRUE,
    ),
    $galaxy->servername . '<br>' . $galaxy_logo,
  );


  $state = '';
  if (is_array($submission->errors)){
    foreach ($submission->errors as $step_index => $error) {
      $subrows = array();
      $subrows[] = array(
        array(
          'data' => 'State',
          'header' => TRUE,
          'width' => '100px',
        ),
        $error['state'] == 'error' ? '<font color="red"><b>' . $error['state'] . '</b></font>' : $error['state'],
      );
      $subrows[] = array(
        array(
          'data' => 'Misc Info',
          'header' => TRUE,
        ),
        $error['misc_info'],
      );
      $subrows[] = array(
        array(
          'data' => 'Ouput Log',
          'header' => TRUE,
        ),
        '<pre>' . $error['stdout'] . '</pre>',
      );
      $subrows[] = array(
        array(
          'data' => 'Error Log',
          'header' => TRUE,
        ),
        '<pre>' . $error['stderr'] . '</pre>',
      );

      $state .= "<b>" . $error['step_name'] . '</b>' . theme_table(array(
        'header' => array(),
        'rows' => $subrows,
        'attributes' => array(
          'class' => 'tripal-galaxy-submission-state-table'
        ),
        'sticky' => FALSE,
        'caption' => '',
        'colgroups' => array(),
        'empty' => '',
      )) . '<br>';
    }
  }
  $rows[] = array(
    array(
      'data' => 'State',
      'header' => TRUE,
      'style' => 'vertical-align: text-top;',
    ),
    $state,
  );


  $details = theme_table(array(
    'header' => $headers,
    'rows' => $rows,
    'attributes' => array(
      'id' => 'tripal-galaxy-usage-stats-table',
    ),
    'sticky' => FALSE,
    'caption' => '',
    'colgroups' => array(),
    'empty' => '',
  ));

  return array(
    '#type' => 'markup',
    '#markup' => $details,
  );
}
/**
 * Retrieves the workflow submission report for the submitting user.
 *
 * @param $sid
 */
function tripal_galaxy_submission_user_report($sid) {
  global $user;

  // set the breadcrumb
  $breadcrumb = array();
  $breadcrumb[] = l('Home', '<front>');
  $breadcrumb[] = l($user->name, 'user/' . $user->uid);
  $breadcrumb[] = l('Galaxy Jobs', 'user/' . $user->uid . '/galaxy-jobs');
  drupal_set_breadcrumb($breadcrumb);

  return tripal_galaxy_workflow_report($sid);
}
/**
 * Retrieves the workflow submission report for an admin user.
 *
 * @param $sid
 */
function tripal_galaxy_submission_admin_report($sid) {

  // set the breadcrumb
  $breadcrumb = array();
  $breadcrumb[] = l('Home', '<front>');
  $breadcrumb[] = l('Administration', 'admin');
  $breadcrumb[] = l('Tripal', 'admin/tripal');
  $breadcrumb[] = l('Extensions', 'admin/tripal/extension');
  $breadcrumb[] = l('Galaxy', 'admin/tripal/extension/galaxy');
  $breadcrumb[] = l('Job Queue', 'admin/tripal/extension/galaxy/job-queue');
  drupal_set_breadcrumb($breadcrumb);

  return tripal_galaxy_workflow_report($sid);

}

/**
 * Implements hook_cron().
 */
function tripal_galaxy_cron() {

  // Invoke any workflows that are in the waiting state.
  // Get the list of submitted workflows that aren't in 'error' state or
  // in 'completed' state.
  $query = db_select('tripal_galaxy_workflow_submission', 'tgws');
  $query->fields('tgws', array('sid'));
  $query->condition('tgws.status', 'Waiting');
  $submissions = $query->execute();
  while($submission = $submissions->fetchObject()) {
    tripal_invoke_galaxy_workflow($submission->sid);
  }

  // Update the status of running workflows
  $query = db_select('tripal_galaxy_workflow_submission', 'tgws');
  $query->fields('tgws', array('sid'));
  $query->condition('tgws.status', array('Error', 'Completed'), 'NOT IN');
  $submissions = $query->execute();

  // Get the status of any workflows that are running
  foreach ($submissions as $submission) {
    tripal_check_galaxy_submission_status($submission->sid);
  }

  // Update the status of the workflows to see if any of them were
  // changed on the galaxy server. If os then that means the workflow we
  // currently have may not work.
  $workflows = db_select('tripal_galaxy_workflow', 'tgw')
    ->fields('tgw')
    ->execute();
  while ($workflow = $workflows->fetchObject()) {
    tripal_check_galaxy_workflow_status($workflow->galaxy_workflow_id);
  }
}

/**
 * Implements hook_mail().
 */
function tripal_galaxy_mail($key, &$message, $params) {

  $site_name =  variable_get('site_name', 'Drupal');

  // Get the submission details.
  $query = db_select('tripal_galaxy_workflow_submission', 'tgws');
  $query->fields('tgws', array('galaxy_workflow_id', 'status', 'errors', 'submit_date', 'start_time', 'end_time'));
  $query->join('tripal_galaxy_workflow', 'tgw', 'tgw.galaxy_workflow_id = tgws.galaxy_workflow_id');
  $query->fields('tgw', array('nid', 'galaxy_id'));
  $query->condition('tgws.sid', $params['sid']);
  $submission = $query->execute()->fetchObject();

  // Get the node that this workflow belongs to
  $node = node_load($submission->nid);

  switch ($key) {
    case 'submission-started':
      $message['subject'] = t("Your job at %site_name has started", array('%site_name' => $site_name));
      $message['body'][] = "You recently submitted a job titled  \"" . $node->title . "\". ";
      $message['body'][] = "This job has started.";
      $message['body'][] = "You may check the status of all submitted jobs in the " .
        l('Galaxy Jobs', '/user/' . $node->uid . '/galaxy-jobs') . ' section of your user account.';
      $message['body'][] = "Thank you.";
      break;
    case 'submission-ended':
      $message['subject'] = t("Your job at %site_name has completed", array('%site_name' => $site_name));
      $message['body'][] = "You recently submitted a job titled  \"" . $node->title . "\". ";
      $message['body'][] = "This job has completed.";
      $message['body'][] = "You may obtain results of this job in the " .
        l('Galaxy Jobs', '/user/' . $node->uid . '/galaxy-jobs') . ' section of your user account.';
      $message['body'][] = "Thank you.";
      break;
    case 'submission-failed':
            $message['subject'] = t("Your job at %site_name has failed", array('%site_name' => $site_name));
      $message['body'][] = "You recently submitted a job titled  \"" . $node->title . "\". ";
      $message['body'][] = "This job has failed.";
      $message['body'][] = "You may check the error logs of this job in the " .
              l('Galaxy Jobs', '/user/' . $node->uid . '/galaxy-jobs') . ' section of your user account.';
      $message['body'][] = "Thank you.";
      break;
  }
}


/**
 * Sends an email to the user when a Galaxy job starts.
 * @param $sid
 *   The Submission ID of the job.
 * @param $uid
 *   The User ID of the user to whom the email will go.
 */
function tripal_galaxy_send_submission_start_mail($sid, $uid) {

  $user = user_load($uid);
  $module = 'tripal_galaxy';
  $key = 'submission-started';

  // Specify 'to' and 'from' addresses.
  $to = $user->mail;
  $from = variable_get('site_mail', 'admin@localhost.localdomain');

  // "params" loads in additional context for email content completion in
  // hook_mail(). In this case, we want to pass in the values the user entered
  // into the form, which include the message body in $form_values['message'].
  $params = array(
    'sid' => $sid
  );

  // The language of the e-mail.
  $language = language_default();

  // Whether or not to automatically send the mail when drupal_mail() is called.
  $send = TRUE;

  // Send the mail, and check for success. Note that this does not guarantee
  // message delivery; only that there were no PHP-related issues encountered
  // while sending.
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  if ($result['result'] != TRUE) {
    watchdog('tripal_galaxy', t('There was a problem sending your message and it was not sent.'), array(), WATCHDOG_ERROR);
  }
}

/**
 * Sends an email to the user when a Galaxy job ends.
 * @param $sid
 *   The Submission ID of the job.
 * @param $uid
 *   The User ID of the user to whom the email will go.
 */
function tripal_galaxy_send_submission_ended_mail($sid, $uid) {

  $user = user_load($uid);
  $module = 'tripal_galaxy';
  $key = 'submission-ended';

  // Specify 'to' and 'from' addresses.
  $to = $user->mail;
  $from = variable_get('site_mail', 'admin@localhost.localdomain');

  // "params" loads in additional context for email content completion in
  // hook_mail(). In this case, we want to pass in the values the user entered
  // into the form, which include the message body in $form_values['message'].
  $params = array(
    'sid' => $sid
  );

  // The language of the e-mail.
  $language = language_default();

  // Whether or not to automatically send the mail when drupal_mail() is called.
  $send = TRUE;

  // Send the mail, and check for success. Note that this does not guarantee
  // message delivery; only that there were no PHP-related issues encountered
  // while sending.
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  if ($result['result'] != TRUE) {
    watchdog('tripal_galaxy', t('There was a problem sending your message and it was not sent.'), array(), WATCHDOG_ERROR);
  }
}

/**
 * Sends an email to the user when a Galaxy job failes.
 * @param $sid
 *   The Submission ID of the job.
 * @param $uid
 *   The User ID of the user to whom the email will go.
 */
function tripal_galaxy_send_submission_failed_mail($sid, $uid) {

  $user = user_load($uid);
  $module = 'tripal_galaxy';
  $key = 'submission-failed';

  // Specify 'to' and 'from' addresses.
  $to = $user->mail;
  $from = variable_get('site_mail', 'admin@localhost.localdomain');

  // "params" loads in additional context for email content completion in
  // hook_mail(). In this case, we want to pass in the values the user entered
  // into the form, which include the message body in $form_values['message'].
  $params = array(
    'sid' => $sid
  );

  // The language of the e-mail.
  $language = language_default();

  // Whether or not to automatically send the mail when drupal_mail() is called.
  $send = TRUE;

  // Send the mail, and check for success. Note that this does not guarantee
  // message delivery; only that there were no PHP-related issues encountered
  // while sending.
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  if ($result['result'] != TRUE) {
    watchdog('tripal_galaxy', t('There was a problem sending your message and it was not sent.'), array(), WATCHDOG_ERROR);
  }
}