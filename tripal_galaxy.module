<?php
/**
 * @file
 * This file contains all Drupal hooks for the module other than any
 * node hooks and block hooks. Those go in the [module name].chado_node.inc file
 * and [module_name].blocks.inc respectively
 *
 */

require ('theme/tripal_galaxy.theme.inc');

/**
 * Implementation of hook_init()
 */
function tripal_galaxy_init() {
  global $user;

  $library = libraries_detect('blend4php');
  if (user_access('administer galaxy', $user)) {
    if (!$library) {
      drupal_set_message(t('The blend4php library is not installed. The Galaxy module requires it.'), 'warning');
    }
  }
}



/**
 * Implements hook_libraries_info().
 *
 * For defining external libraries.
 */
function tripal_galaxy_libraries_info() {

  // A very simple library. No changing APIs (hence, no versions), no variants.
  // Expected to be extracted into 'sites/all/libraries/simple'.
  $libraries['blend4php'] = array(
    'name' => 'blend4php',
    'vendor url' => 'https://github.com/galaxyproject/blend4php',
    'download url' => 'https://github.com/galaxyproject/blend4php',
    'version arguments' => array(
      'file' => 'version.txt',
      'pattern' => '/^(.*)$/',
      'lines' => 1,
    ),
    'files' => array(
      'php' => array('galaxy.inc'),
    ),
  );

  return $libraries;
}


/**
 * Implementation of hook_permissions()
 *
 * Set the permission types that this module uses.
 *
 * @ingroup tripal_file
 */
function tripal_galaxy_permission() {
  return array (
    'use galaxy' => array (
      'title' => t ( 'Execute Published Galaxy Workflows' ),
      'description' => t ( 'Allows a user to submit a published workflow for execution on a remote Galaxy Instance' )
    ),
    'administer galaxy' => array (
      'title' => t ( 'Administer Galaxy' ),
      'description' => t ( 'Allows a user to configure site-wide default Galaxy instances.' )
    )
  );
}

/**
 * Implements hook_menu()
 *
 * Specifies menu items and URLs used by this module.
 *
 * @ingroup tripal_galaxy
 */
function tripal_galaxy_menu() {
  $items = array ();

  // EXPLANATION: all extension modules should have an administrative menu item
  // with the path set to 'admin/tripal/extension/[module name]'.
  $items['admin/tripal/extension/galaxy'] = array (
    'title' => 'Manage Galaxy Instances',
    'description' => 'Integrate workflows from a remote Galaxy instance with this Tripal site',
    'page callback' => 'tripal_galaxy_admin_home',
    'access arguments' => array('administer galaxy'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path ('module', 'tripal_galaxy')
  );

  // Edit Galaxy
  $items['admin/tripal/extension/galaxy/edit/%'] = array (
    'description' => 'Edit a galaxy instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array ('tripal_galaxy_admin_configuration_form', 5),
    'access arguments' => array ('administer galaxy'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path ( 'module', 'tripal_galaxy' )
  );

  // Add Galaxy
  $items['admin/tripal/extension/galaxy/add'] = array (
    'description' => 'Add a galaxy server instance',
    'title' => 'Add Galaxy Instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array (
      'tripal_galaxy_admin_configuration_form'
    ),
    'access arguments' => array (
      'administer galaxy'
    ),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path ( 'module', 'tripal_galaxy' )
  );

  // Available Workflows
  $items['admin/tripal/extension/galaxy/available_wf'] = array(
    'title' => 'Workflows',
    'description' => 'Lists the available workflows of the user',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'tripal_galaxy_admin_available_wf_form',
    ),
    'access arguments' => array (
      'administer galaxy'
    ),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tripal_galaxy.admin_wf_form.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy')
  );

  // Add Workflows
  $items['admin/tripal/extension/galaxy/available_wf/add_wf'] = array(
    'title' => 'Add Workflows',
    'description' => 'Add workflows to the site given the remote galaxy instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tripal_galaxy_admin_add_wf_form'),
    'access arguments' => array('administer galaxy'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/tripal_galaxy.admin_wf_form_add.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy' )
  );

  // Remove Workflows
  $items['admin/tripal/extension/galaxy/available_wf/remove/%'] = array (
    'description' => 'Remove a workflow from site',
    'page callback' => 'tripal_galaxy_admin_remove_wf',
    'page arguments' => array(6),
    'access arguments' => array('administer galaxy'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path ( 'module', 'tripal_galaxy' )
  );

  // Usage
  $items['admin/tripal/extension/galaxy/usage'] = array (
    'title' => 'Usage',
    'description' => 'Explore Galaxy usage details.',
    'page callback' => 'drupal_get_form',
    'page arguments' => 'tripal_galaxy_admin_usage_form',
    'access arguments' => array (
      'administer galaxy'
    ),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path ( 'module', 'tripal_galaxy' )
  );

  // submission queue
  $items['admin/tripal/extension/galaxy/submitted'] = array (
    'title' => 'Submitted',
    'description' => 'View Submitted workflows',
    // Are we sure about this?
    'page callback' => 'tripal_galaxy_submitted_list',
    'access arguments' => array (
      'administer galaxy',
    ),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tripal_galaxy.admin_queue.inc',
    'file path' => drupal_get_path ( 'module', 'tripal_galaxy' ),
  );

 // Edit workflow submission
  $items['admin/tripal/extension/galaxy/submitted/view/%'] = array (
    'description' => 'Edit a galaxy instance',
    'page callback' => 'tripal_galaxy_submission_view',
    'page arguments' => array (6),
    'access arguments' => array ('administer galaxy'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin_queue.inc',
    'file path' => drupal_get_path ( 'module', 'tripal_galaxy' )
  );


  // Workflow
  $items['workflows'] = array (
    'title' => 'Available Workflows',
    'description' => 'A list of available analytical workflows for this site',
    // Are we sure about this?
    'page callback' => 'test_webforms',
    'access arguments' => array (
      'administer galaxy'
    ),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tripal_galaxy.user.inc',
    'file path' => drupal_get_path ( 'module', 'tripal_galaxy' )
  );

  // Galaxy
  $items['user/galaxy'] = array (
    'title' => 'Galaxy',
    'description' => 'Configure Galaxy Server',
    // Are we sure about this?
    'page callback' => 'drupal_get_form',
    'page arguments' => 'tripal_galaxy_user_configuration_form',
    'access arguments' => array (
      'use galaxy'
    ),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tripal_galaxy.user.inc',
    'file path' => drupal_get_path ( 'module', 'tripal_galaxy' )
  );

  return $items;
}

/**
 * Implements hook_views_api()
 *
 * This hook tells drupal that there is views support for
 * for this module which then automatically includes the tripal_db.views.inc
 * where all the views integration code is found.
 *
 * @ingroup tripal_galaxy
 */
function tripal_galaxy_views_api() {
  return array (
    'api' => 3.0
  );
}

/**
 *  We need to let drupal know about our theme functions and their arguments.
 *  We create theme functions to allow users of the module to customize the
 *  look and feel of the output generated in this module
 *
 * @ingroup tripal_galaxy
 */
function tripal_galaxy_theme($existing, $type, $theme, $path) {
  $items = array (
    'tripal_galaxy_admin_add_wf_form_rows' => array (
      'render element' => 'form'
    ),

    'tripal_galaxy_admin_available_wf_form_rows' => array(
      'render element' => 'form'
    ),

    'tripal_galaxy_submitted_list' => array(
      'render element' => 'element'
    ),

    'tripal_galaxy_submission_view' => array(
      'render element' => 'element'
    ),

  );
  return $items;
}

/**
 * Implements a pseudo hook on the submit button of the galaxy webform.
 *
 * Along with inserting the options selected on the webform to the tripal db
 * this function also calls the tripal_galaxy_webform_client_submit function
 * to then pull this data from the db and write it to the galaxy server for the
 * invoke (execution) of the workflow.
 *
 * @param $form
 *  A drupal form that has all the data associated to the webform (what values
 *  have been submitted, components and conditionals of the webform,
 *  information that drupal needs to present this form)
 * @param $form_state
 *  Contains interactive pieces of the form that the user can manipulate (
 *  buttons) and other data for drupal to render
 * @param $form_id
 *  Identifier for drupal
 */
function tripal_galaxy_form_webform_client_form_alter(&$form, &$form_state, $form_id ) {
  // Check if this particular webform really is a galaxy webform
  // At each 'turn of the page' of the particular webform this is being called
  if($form['#node']->webform['components'][1]['form_key'] == 'galaxy_webform'){
    $form['#submit'][] = 'tripal_galaxy_workflow_invoke';
  }

  //  dpm($form);
  // dpm($form_state);
}

function tripal_galaxy_webform_client_submit(){
  dpm("test");
}


/**
 * This function listening for the webform to be completed JIT style!
 *
 * When the completed field of the $form_state is set to true this function
 * gather all of the inputs at once and acquire the id's needed to invoke the
 * workflow on the galaxy side
 *
 * @param $form
 * @param $form_state
 */
function tripal_galaxy_workflow_invoke($form, &$form_state){

  if($form_state['webform_completed'] == TRUE){
    // Grab the submitted data from the form_state
    // The result will be an associative array with the keys being the cid's
    // (component id's) of the webform and the value being the option/value
    // selected

    // dpm($form_state);
    $inputs = $form_state['values']['submitted'];
    // There will be cid's with no value so get rid of them (these are usually
    // components that either did not need a value or were hidden
    // due to conditionals)
    foreach($inputs as $cid => $value){
      if(empty($value)){
        unset($inputs[$cid]);
      }
    }

    // dpm($inputs);

    // The array to pass to the workflow invoke with the proper elements
    $galaxy_inputs = array(
      'parameters' => array(),
      'workflow_id' => $form['#node']->webform['components'][1]['extra']['wfid'],
      'input_dataset_ids' => array('d3a4d6a5256f2d9a', '8317ee2b0d0f62d9', '70eec96181a992f8'),
    );

    // The inputs need to be formatted to galaxy's workflow invoke
    // NOTE: The entire form can be found within form_state under
    // $form_state['build_info']['args'][0]['webform']

    // Some components will belong to the same tool,
    // So group these param_names into the same step_id key
    foreach($inputs as $cid => $value){

      // Grab the component from the webform
      $component = $form_state['build_info']['args'][0]->webform['components'][$cid];
      // Skip the pagebreaks
      if($component['type'] == 'pagebreak'){
        continue;
      }
      // NOTE: The step id's (page_num) on the server side are offset by 1
      // so subtract 1
      if(array_key_exists(($component['page_num'] - 1), $galaxy_inputs['parameters'])){
        $galaxy_inputs['parameters'][($component['page_num'] - 1)][$component['extra']['param_name']] = $value;
      }
      else{
        $galaxy_inputs['parameters'][($component['page_num'] - 1)] = array(
          $component['extra']['param_name'] => $value
        );
      }
      //

    }

    // dpm($galaxy_inputs);

    /*REFERENCE*/
    // From blend4php/src/Workflows.inc
    // $inputs (associative array with the following elements)
    //  - 'workflow_id'
    //    The ID of the workflow to invoke.
    //  - 'input_dataset_ids'
    //    The array of id's of the datasets to enter into the workflow.
    //    These id's can be found using the dataset class's index() function.
    //    The dataset must be present in a history, and the dataset 'state' must
    //    be 'ok' and 'deleted' must be set to FALSE.
    //  - 'parameters'
    //    A mapping of tool parameters that are non-datasets parameters. The map
    //    must be in the following format:
    //    @code
    //    'parameters' = array(
    //      [step_id_or_UUID] => array([param_name] => [value]),
    //      [step_id_or_UUID] => array([param_name] => [value])
    //    );
    //    @endcode
    //  - 'hist_id'
    //    Optional. The id of the history to export the results to.
    //    If a new history is not created. Leave this ommitted if a new history
    //    is to be created.



    // The [1] is the galaxy webform element that we created during the webform
    // construction

    // These are for finding the correct history and workflow to couple and
    // invoke
    // $workflow_id = $form['#node']->webform['components'][1]['extra']['wfid'];
    // $hist_id = $form['#node']->webform['components'][1]['extra']['hid'];

    // These are for setting up the instance to access the particular galaxy
    // server
    $host = $form['#node']->webform['components'][1]['extra']['host'];
    $port = $form['#node']->webform['components'][1]['extra']['port'];
    $https = $form['#node']->webform['components'][1]['extra']['https'];
    $api_key = $form['#node']->webform['components'][1]['extra']['api_key'];


    $library = libraries_load('blend4php');
    $galaxy_instance = new GalaxyInstance($host, $port, $https);
    $galaxy_instance->setAPIKey($api_key);
    $workflow = new GalaxyWorkflows($galaxy_instance);
    // $params = array(
    //   'workflow_id' => $workflow_id,
    //   // 'hist_id' => $hist_id,
    //     //  These are the inputs gathered by the webform
    //   // 'input_dataset_ids' => ,
    //   'parameters' => $galaxy_inputs,
    // );

    $workflow->invoke($galaxy_inputs);
  // dpm("test");

    // tripal_galaxy_webform_client_submit();
  }
  //

  // dpm($form);

  // $inputs = tripal_galaxy_gather_params($form, $form_state);
  // dpm($inputs);



//   // To be implemented more properly once inputs are generated
//   $start_time = date("D M d, Y G:i");
//   $data = array(
//     'galaxy_id' => '999',
//     'workflow_id' => $workflow_id,
//     'workflow_name' => 'Test Workflow',
//     'inputs' => JSon_encode ($inputs),
//   		// issues with param encoding
//     'parameters' => json_encode ($parameters),
//     'status' => 'not yet implemented',
//     'start_time' => $start_time,
//   );
//   // Now insert the submission into the database
//   $workflow_submission = drupal_write_record('tripal_galaxy_wf_submission', $data);
}

/*
 *  Copy inputs from webform to the galaxy server to invoke the workflow.
 *
 *  This function will screen the values inputted from the submitted webform
 *  and then place these inputs in the invocation of the workflow on the galaxy
 *  server
 */
function tripal_galaxy_store_inputs(&$inputs){


}

/**
 * Load defauilt inputs for a workflow. The default inputs are
 * The inputs displayed on the current history whose names match that
 * which was marked on the webform.
 *
 * @param multi-variable $form_state
 */
function tripal_galaxy_default_inputs($form, &$form_state){

  // Start on the 0'th input;
 //  $input_num = 0;
 //  $dataset_ids = array();
 //
 //  // Obtain submission id and node id.
 //  // $sid = $form_state['storage']['details']['sid'];
 //  // $nid = $form_state['storage']['details']['nid'];
 //
 //  // Need submission data from webform_submission_data table
 //  $sql = "SELECT * FROM {webform_submitted_data} WHERE sid = :sid";
 //  $submission_query = db_query($sql, array(':sid' => $sid));
 //
 //
 // while ($submission_data = $submission_query->fetchObject() ){
 //    // Need the proper name of the parameter name and step number from webform_component table
 //    $sql = "SELECT * FROM {webform_component} WHERE nid = :nid AND cid = :cid";
 //    $component_query = db_query($sql, array(':nid' => $nid, ':cid' =>$submission_data->cid ));
 //    $component_data = $component_query->fetchObject();
 //
 //    $form_key = $component_data->form_key;
 //
 //     // if a form key does not have dataset_ in the form_key, RUN
 //    if(strpos($form_key, "dataset_") === FALSE){
 //      continue;
 //    }
 //
 //    // Input the dataset id into the dataset_ids array() and continue.
 //    $dataset_id = $submission_data->data;
 //    $dataset_ids[$input_num] = $dataset_id;
 //    $input_num++;
 //    continue;
 //
 // }
 //
 //  return $dataset_ids;
}

/**
 * Gathers tool parameters from a given $webform.
 *
 * @param multi-variable $webform
 *
 * @return
 *   An array of tool parameters to be used with the blend4php galaxy_invoke function
 */
function tripal_galaxy_gather_params($form, &$form_state) {

  // Variable initialization
  // $parameters = array ();
  // $tool_index = 0;
  // $tool_param_name = 0;
  // $tool_param_value = 0;
  //
  // // Obtain submission id and node id.
  // //dpm($form_state);
  // // $sid = $form_state['storage']['details']['sid'];
  // // $nid = $form_state['storage']['details']['nid'];
  //
  // // Need submission data from webform_submission_data table
  // $sql = "SELECT * FROM {webform_submitted_data} WHERE sid = :sid";
  // $submission_query = db_query($sql, array(':sid' => $sid));
  //
  // // Loop through all of the submission entries for a given submission
  // while ($submission_data = $submission_query->fetchObject() ){
  //   // Need the proper name of the parameter name and step number from webform_component table
  //   $sql = "SELECT * FROM {webform_component} WHERE nid = :nid AND cid = :cid";
  //   $component_query = db_query($sql, array(':nid' => $nid, ':cid' =>$submission_data->cid ));
  //   $component_data = $component_query->fetchObject();
  //
  //   $form_key = $component_data->form_key;
  //
  //   // if a form key does not have Step_ in the form_key, RUN
  //   if(strpos($form_key, "Step_") === FALSE){
  //     continue;
  //   }
  //
  //   // 1) Obtain the index of the tool, if we are not dealing with
  //   $matches = array();
  //   $tool_index = preg_match ( '/^Step_(\d+)/', $form_key, $matches );
  //   $tool_index = $matches[1];
  //   $tool_index --;
  //
  //   // 2) Obtain tool parameter name
  //   $tool_param_name = preg_match ( '/^Step_\d+_(.+)/', $form_key, $matches );
  //
  //   // Check to make sure we have a valid parameter name
  //   if ($tool_param_name == - 1 || count ( $matches ) == 0) {
  //     continue;
  //   }
  //   $tool_param_name = $matches[1];
  //
  //   // 3) Obtain tool_parameter data
  //   $tool_param_value = $submission_data->data;
  //   if($tool_param_value == '' || $tool_param_value == NULL) {
  //     continue;
  //   }
  //
  //   // Place the parameters in the appropriate format
  //   $array2 = array($tool_param_name => $tool_param_value);
  //       if(empty($parameters[$tool_index])){
  //       $parameters[$tool_index] = array();
  //     }
  //   $parameters[$tool_index] = array_merge($parameters[$tool_index], $array2);
  // }
  //
  // return $parameters;

}



/**
 * Implements hook_help()
 *
 * Adds a help $formpage to the module list
 */
function tripal_galaxy_help($path, $arg) {

  // EXPLANATION: in the tripal_galaxy_menu() function above we created
  // a menu item for the help documentation. The menu item specified
  // a function that should be called when the menu item is clicked. This
  // is that function. But, rather than place HTML code in this function
  // we want to have our help documentation in a template galaxy. We
  // specified in the tripal_galaxy.theme() function that we have a template
  // galaxy so now we want to use get the contents of that template galaxy and
  // return it.
  if ($path == 'admin/help#tripal_galaxy') {
    return theme ( 'tripal_galaxy_help', array () );
  }

}
