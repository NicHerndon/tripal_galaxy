<?php
/**
 * @file
 * This file contains all Drupal hooks for the module other than any
 * node hooks and block hooks. Those go in the [module name].chado_node.inc file
 * and [module_name].blocks.inc respectively
 *
 */

require ('theme/tripal_galaxy.theme.inc');

/**
 * Implementation of hook_init()
 */
function tripal_galaxy_init() {
  global $user;

  $library = libraries_detect('blend4php');
  if (user_access('administer galaxy', $user)) {
    if (!$library) {
      drupal_set_message(t('The blend4php library is not installed. The Galaxy module requires it.'), 'warning');
    }
  }
}



/**
 * Implements hook_libraries_info().
 *
 * For defining external libraries.
 */
function tripal_galaxy_libraries_info() {

  // A very simple library. No changing APIs (hence, no versions), no variants.
  // Expected to be extracted into 'sites/all/libraries/simple'.
  $libraries['blend4php'] = array(
    'name' => 'blend4php',
    'vendor url' => 'https://github.com/galaxyproject/blend4php',
    'download url' => 'https://github.com/galaxyproject/blend4php',
    'version arguments' => array(
      'file' => 'version.txt',
      'pattern' => '/^(.*)$/',
      'lines' => 1,
    ),
    'files' => array(
      'php' => array('galaxy.inc'),
    ),
  );

  return $libraries;
}


/**
 * Implementation of hook_permissions()
 *
 * Set the permission types that this module uses.
 *
 * @ingroup tripal_file
 */
function tripal_galaxy_permission() {
  return array (
    'use galaxy' => array (
      'title' => t ( 'Execute Published Galaxy Workflows' ),
      'description' => t ( 'Allows a user to submit a published workflow for execution on a remote Galaxy Instance' )
    ),
    'administer galaxy' => array (
      'title' => t ( 'Administer Galaxy' ),
      'description' => t ( 'Allows a user to configure site-wide default Galaxy instances.' )
    )
  );
}

/**
 * Implements hook_menu()
 *
 * Specifies menu items and URLs used by this module.
 *
 * @ingroup tripal_galaxy
 */
function tripal_galaxy_menu() {
  $items = array ();

  // EXPLANATION: all extension modules should have an administrative menu item
  // with the path set to 'admin/tripal/extension/[module name]'.
  $items['admin/tripal/extension/galaxy'] = array (
    'title' => 'Manage Galaxy Instances',
    'description' => 'Integrate workflows from a remote Galaxy instance with this Tripal site',
    'page callback' => 'tripal_galaxy_admin_home',
    'access arguments' => array('administer galaxy'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path ('module', 'tripal_galaxy')
  );

  // Edit Galaxy
  $items['admin/tripal/extension/galaxy/edit/%'] = array (
    'description' => 'Edit a galaxy instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array ('tripal_galaxy_admin_configuration_form', 5),
    'access arguments' => array ('administer galaxy'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path ( 'module', 'tripal_galaxy' )
  );

  // Add Galaxy
  $items['admin/tripal/extension/galaxy/add'] = array (
    'description' => 'add a galaxy instance',
    'title' => 'Add Galaxy Instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array (
      'tripal_galaxy_admin_configuration_form'
    ),
    'access arguments' => array (
      'administer galaxy'
    ),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path ( 'module', 'tripal_galaxy' )
  );

  // Available Workflows
  $items['admin/tripal/extension/galaxy/available_wf'] = array(
    'title' => 'Workflows',
    'description' => 'Lists the available workflows for the user',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'tripal_galaxy_admin_available_wf_form',
    ),
    'access arguments' => array (
      'administer galaxy'
    ),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tripal_galaxy.admin_wf_form.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy')
  );

  // Add Workflows
  $items['admin/tripal/extension/galaxy/available_wf/add_wf'] = array(
    'title' => 'Add Workflows',
    'description' => 'Add workflows to the site given the remote galaxy instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tripal_galaxy_admin_add_wf_form'),
    'access arguments' => array('administer galaxy'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/tripal_galaxy.admin_wf_form_add.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy' )
  );

  // Remove Workflows
  $items['admin/tripal/extension/galaxy/available_wf/remove/%'] = array (
    'description' => 'Remove a Workflow from site',
    'page callback' => 'tripal_galaxy_admin_remove_wf',
    'page arguments' => array(6),
    'access arguments' => array('administer galaxy'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path ( 'module', 'tripal_galaxy' )
  );
  
  // Usage
  $items['admin/tripal/extension/galaxy/usage'] = array (
    'title' => 'Usage',
    'description' => 'Explore Galaxy usage details.',
    'page callback' => 'drupal_get_form',
    'page arguments' => 'tripal_galaxy_admin_usage_form',
    'access arguments' => array (
      'administer galaxy'
    ),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path ( 'module', 'tripal_galaxy' )
  );

  // Submitted
  $items['admin/tripal/extension/galaxy/submitted'] = array (
    'title' => 'Submitted',
    'description' => 'View Submitted workflows',
    // Are we sure about this?
    'page callback' => 'tripal_galaxy_submitted_list',
    'access arguments' => array (
      'administer galaxy',
    ),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tripal_galaxy.user_queue.inc',
    'file path' => drupal_get_path ( 'module', 'tripal_galaxy' ),
  );

  // Workflow
  $items['workflows'] = array (
    'title' => 'Available Workflows',
    'description' => 'A list of available analytical workflows for this site',
    // Are we sure about this?
    'page callback' => 'test_webforms',
    'access arguments' => array (
      'administer galaxy'
    ),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tripal_galaxy.user.inc',
    'file path' => drupal_get_path ( 'module', 'tripal_galaxy' )
  );

  // Galaxy
  $items['user/galaxy'] = array (
    'title' => 'Galaxy',
    'description' => 'Configure Galaxy Server',
    // Are we sure about this?
    'page callback' => 'drupal_get_form',
    'page arguments' => 'tripal_galaxy_user_configuration_form',
    'access arguments' => array (
      'use galaxy'
    ),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tripal_galaxy.user.inc',
    'file path' => drupal_get_path ( 'module', 'tripal_galaxy' )
  );

  return $items;
}

/**
 * Implements hook_views_api()
 *
 * This hook tells drupal that there is views support for
 * for this module which then automatically includes the tripal_db.views.inc
 * where all the views integration code is found.
 *
 * @ingroup tripal_galaxy
 */
function tripal_galaxy_views_api() {
  return array (
    'api' => 3.0
  );
}

/**
 *  We need to let drupal know about our theme functions and their arguments.
 *  We create theme functions to allow users of the module to customize the
 *  look and feel of the output generated in this module
 *
 * @ingroup tripal_galaxy
 */
function tripal_galaxy_theme($existing, $type, $theme, $path) {
  $items = array (
    'tripal_galaxy_admin_add_wf_form_rows' => array (
      'render element' => 'form'
    ),

    'tripal_galaxy_admin_available_wf_form_rows' => array(
      'render element' => 'form'
    ),
    
    'tripal_galaxy_submitted_list' => array(
      'render element' => 'element'
    ),

  );
  return $items;
}


/**
 * 
 * 
 * @param  $form
 * @param  $form_state
 * @param  $form_id
 */
function tripal_galaxy_form_alter(&$form, &$form_state, $form_id ) {
  
  // Check to make sure the form_state has the following keys
  if(!array_key_exists('webform', $form_state )){
    dpm("nope1");
    return;  
  }
  if(!array_key_exists('component_tree', $form_state['webform'])){
    dpm("nope2");
    return;
  }
  if(!array_key_exists('children',$form_state['webform']['component_tree'])){
    dpm("nope3");
    return;
  }
  
  $webform = $form_state['webform']['component_tree']['children'];
  
  // If the form is a galaxy webform, it should have a [Galaxy Webfo

  if ($webform[1]['form_key'] == 'galaxy_webform') {
    $form['#submit'][] = 'tripal_galaxy_webform_client_submit';
  }
  
}


/**
 * The function responsible for overriding the webform's submit handler 
 * 
 * @param unknown $form
 * @param unknown $form_state
 */
function tripal_galaxy_webform_client_submit($form, &$form_state){
  
  
  $parameters = tripal_galaxy_gather_params($form, $form_state);
  
  //$inputs = tripal_galaxy_temp_inputs(); 
  $inputs = tripal_galaxy_default_inputs($form, $form_state);
  dpm($inputs);
  
  /*
   * This section is hardcoded! Please remove before it becomes
   * too late to do so. 
   */
  $workflow_id = 'd413a19dec13d11e';
  $library = libraries_load('blend4php');
  $galaxy_instance = new GalaxyInstance('localhost', '8080');
  $galaxy_instance->setAPIKey('a50cc79c4f0aac014831256c8c00c1cb');
  $workflow = new GalaxyWorkflows($galaxy_instance);
  $array = array(
    'workflow_id' => $workflow_id,
    'hist_id' => 'c9468fdb6dc5c5f1', 
    'input_dataset_ids' => $inputs,
    'parameters' => $parameters,
  );
  
  $workflow->invoke($array); 
  $start_time = date("D M d, Y G:i");
  $data = array(
    'galaxy_id' => '999',
    'workflow_id' => $workflow_id,
    'inputs' => implode("", $inputs),
    'parameters' => implode("", $parameters),
    'status' => 'not yet implemented',
    'start_time' => $start_time,
  );
  // Now insert the submission into the database
  $workflow_submission = drupal_write_record('tripal_galaxy_wf_submission', $data);
  
  
}

/*
 * 
 */
function tripal_galaxy_gather_inputs($form, &$form_state){
  
}

/**
 * Load defauilt inputs for a workflow. The default inputs are 
 * The inputs displayed on the current history whose names match that
 * which was marked on the webform.
 * 
 * @param multi-variable $form_state
 */
function tripal_galaxy_default_inputs($form, &$form_state){
    
  // Start on the 0'th input;
  $input_num = 0;
  $dataset_ids = array();
    
  // Obtain submission id and node id.
  $sid = $form_state['storage']['details']['sid'];
  $nid = $form_state['storage']['details']['nid'];
  
  // Need submission data from webform_submission_data table
  $sql = "SELECT * FROM {webform_submitted_data} WHERE sid = :sid";
  $submission_query = db_query($sql, array(':sid' => $sid));
  
  
 while ($submission_data = $submission_query->fetchObject() ){
    // Need the proper name of the parameter name and step number from webform_component table
    $sql = "SELECT * FROM {webform_component} WHERE nid = :nid AND cid = :cid";
    $component_query = db_query($sql, array(':nid' => $nid, ':cid' =>$submission_data->cid ));
    $component_data = $component_query->fetchObject();

    $form_key = $component_data->form_key;  
      
     // if a form key does not have dataset_ in the form_key, RUN
    if(strpos($form_key, "dataset_") === FALSE){
      continue;
    }
    
    // Input the dataset id into the dataset_ids array() and continue.
    $dataset_id = $submission_data->data;
    $dataset_ids[$input_num] = $dataset_id;
    $input_num++;
    continue;
    
 }
  
  return $dataset_ids;  
}

/**
 * Gathers tool parameters from a given $webform.
 * 
 * @param multi-variable $webform
 * 
 * @return 
 *   An array of tool parameters to be used with the blend4php galaxy_invoke function
 */
function tripal_galaxy_gather_params($form, &$form_state) {
  
  // Variable initialization
  $parameters = array ();
  $tool_index = 0;
  $tool_param_name = 0;
  $tool_param_value = 0;
  
  // Obtain submission id and node id.
  $sid = $form_state['storage']['details']['sid'];
  $nid = $form_state['storage']['details']['nid'];
  
  // Need submission data from webform_submission_data table
  $sql = "SELECT * FROM {webform_submitted_data} WHERE sid = :sid";
  $submission_query = db_query($sql, array(':sid' => $sid));
  
  // Loop through all of the submission entries for a given submission
  while ($submission_data = $submission_query->fetchObject() ){
    // Need the proper name of the parameter name and step number from webform_component table
    $sql = "SELECT * FROM {webform_component} WHERE nid = :nid AND cid = :cid";
    $component_query = db_query($sql, array(':nid' => $nid, ':cid' =>$submission_data->cid ));
    $component_data = $component_query->fetchObject();

    $form_key = $component_data->form_key;
    
    // if a form key does not have Step_ in the form_key, RUN
    if(strpos($form_key, "Step_") === FALSE){
      continue;
    }
    
    // 1) Obtain the index of the tool, if we are not dealing with
    $matches = array();
    $tool_index = preg_match ( '/^Step_(\d+)/', $form_key, $matches );
    $tool_index = $matches[1];
    $tool_index --;
    
    // 2) Obtain tool parameter name
    $tool_param_name = preg_match ( '/^Step_\d+_(.+)/', $form_key, $matches );    
    
    // Check to make sure we have a valid parameter name
    if ($tool_param_name == - 1 || count ( $matches ) == 0) {
      continue;
    }
    $tool_param_name = $matches[1];
    
    // 3) Obtain tool_parameter data
    $tool_param_value = $submission_data->data;
    if($tool_param_value == '' || $tool_param_value == NULL) {
      continue;
    }
    
    // Place the parameters in the appropriate format
    $array2 = array($tool_param_name => $tool_param_value);
        if(empty($parameters[$tool_index])){
        $parameters[$tool_index] = array();
      }
    $parameters[$tool_index] = array_merge($parameters[$tool_index], $array2);
  }

  return $parameters;
  
}



/**
 * Implements hook_help()
 *
 * Adds a help $formpage to the module list
 */
function tripal_galaxy_help($path, $arg) {

  // EXPLANATION: in the tripal_galaxy_menu() function above we created
  // a menu item for the help documentation. The menu item specified
  // a function that should be called when the menu item is clicked. This
  // is that function. But, rather than place HTML code in this function
  // we want to have our help documentation in a template galaxy. We
  // specified in the tripal_galaxy.theme() function that we have a template
  // galaxy so now we want to use get the contents of that template galaxy and
  // return it.
  if ($path == 'admin/help#tripal_galaxy') {
    return theme ( 'tripal_galaxy_help', array () );
  }
  
}

