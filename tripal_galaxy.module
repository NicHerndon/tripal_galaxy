<?php
/**
 * @file
 *
 */

require ('theme/tripal_galaxy.theme.inc');
require ('api/tripal_galaxy.api.inc');

/**
 * Implementation of hook_init()
 */
function tripal_galaxy_init() {
  global $user;

  $library = libraries_detect('blend4php');
  if (user_access('administer galaxy', $user)) {
    if (!$library) {
      drupal_set_message(t('The blend4php library is not installed. The Galaxy module requires it.'), 'warning');
    }
  }
}



/**
 * Implements hook_libraries_info().
 *
 * For defining external libraries.
 */
function tripal_galaxy_libraries_info() {

  // A very simple library. No changing APIs (hence, no versions), no variants.
  // Expected to be extracted into 'sites/all/libraries/simple'.
  $libraries['blend4php'] = array(
    'name' => 'blend4php',
    'vendor url' => 'https://github.com/galaxyproject/blend4php',
    'download url' => 'https://github.com/galaxyproject/blend4php',
    'version arguments' => array(
      'file' => 'version.txt',
      'pattern' => '/^(.*)$/',
      'lines' => 1,
    ),
    'files' => array(
      'php' => array('galaxy.inc'),
    ),
  );

  return $libraries;
}


/**
 * Implementation of hook_permissions()
 *
 * Set the permission types that this module uses.
 *
 * @ingroup tripal_file
 */
function tripal_galaxy_permission() {
  return array (
    'use galaxy' => array (
      'title' => t ( 'Execute Published Galaxy Workflows' ),
      'description' => t ( 'Allows a user to submit a published workflow for execution on a remote Galaxy Instance' )
    ),
    'administer galaxy' => array (
      'title' => t ( 'Administer Galaxy' ),
      'description' => t ( 'Allows a user to configure site-wide default Galaxy instances.' )
    )
  );
}

/**
 * Implements hook_menu()
 *
 * Specifies menu items and URLs used by this module.
 *
 * @ingroup tripal_galaxy
 */
function tripal_galaxy_menu() {
  $items = array ();

  // EXPLANATION: all extension modules should have an administrative menu item
  // with the path set to 'admin/tripal/extension/[module name]'.
  $items['admin/tripal/extension/galaxy'] = array (
    'title' => 'Galaxy',
    'description' => 'Integrate workflows from a remote Galaxy instance with this Tripal site',
    'page callback' => 'tripal_galaxy_admin_home',
    'access arguments' => array('administer galaxy'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path ('module', 'tripal_galaxy')
  );

  // Edit Galaxy
  $items['admin/tripal/extension/galaxy/edit/%'] = array (
    'description' => 'Edit a galaxy instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array ('tripal_galaxy_admin_configuration_form', 5),
    'access arguments' => array ('administer galaxy'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin_configuration_form.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy')
  );

  // Add Galaxy
  $items['admin/tripal/extension/galaxy/add'] = array (
    'description' => 'Add a galaxy server instance',
    'title' => 'Add Galaxy Instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tripal_galaxy_admin_configuration_form'),
    'access arguments' => array('administer galaxy'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/tripal_galaxy.admin_configuration_form.inc',
    'file path' => drupal_get_path ( 'module', 'tripal_galaxy' )
  );

  // Available Workflows
  $items['admin/tripal/extension/galaxy/workflows'] = array(
    'title' => 'Workflows',
    'description' => 'Lists the available Workflows of the user',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tripal_galaxy_admin_workflows_form'),
    'access arguments' => array('administer galaxy'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tripal_galaxy.admin_workflow_form.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
    'weight' => 5,
  );

  // Add Workflows
  $items['admin/tripal/extension/galaxy/workflows/add'] = array(
    'title' => 'Add Workflows',
    'description' => 'Add workflows to the site given the remote galaxy instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tripal_galaxy_admin_add_workflow_form'),
    'access arguments' => array('administer galaxy'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/tripal_galaxy.admin_workflow_form_add.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy' ),
  );

  // Remove Workflows
  $items['admin/tripal/extension/galaxy/workflows/remove/%'] = array (
    'description' => 'Remove a workflow from site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tripal_galaxy_admin_confirm_remove_workflow_form', 6),
    'access arguments' => array('administer galaxy'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
    'weight' => 10,
  );

  //Usage
  $items['admin/tripal/extension/galaxy/usage'] = array (
    'title' => 'Usage',
    'description' => 'View Usage of Galaxy Workflows',
    'page callback' => 'tripal_galaxy_admin_usage_page',
    'access arguments' => array('administer galaxy'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tripal_galaxy.admin_usage.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
    'weight' => 20,
  );
  // submission queue


 // Edit workflow submission
  // $items['admin/tripal/extension/galaxy/submitted/view/%'] = array (
  //   'description' => 'Edit a galaxy instance',
  //   'page callback' => 'tripal_galaxy_submission_view',
  //   'page arguments' => array (6),
  //   'access arguments' => array ('administer galaxy'),
  //   'type' => MENU_CALLBACK,
  //   'file' => 'includes/tripal_galaxy.admin_queue.inc',
  //   'file path' => drupal_get_path ( 'module', 'tripal_galaxy' )
  // );

  // Workflow
  // $items['workflows'] = array (
  //   'title' => 'Available Workflows',
  //   'description' => 'A list of available analytical workflows for this site',
  //   // Are we sure about this?
  //   'page callback' => 'test_webforms',
  //   'access arguments' => array (
  //     'administer galaxy'
  //   ),
  //   'type' => MENU_LOCAL_TASK,
  //   'file' => 'includes/tripal_galaxy.user.inc',
  //   'file path' => drupal_get_path ( 'module', 'tripal_galaxy' )
  // );

  // Galaxy
  $items['user/galaxy'] = array (
    'title' => 'Galaxy',
    'description' => 'Configure Galaxy Server',
    // Are we sure about this?
    'page callback' => 'drupal_get_form',
    'page arguments' => 'tripal_galaxy_user_configuration_form',
    'access arguments' => array (
      'use galaxy'
    ),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tripal_galaxy.user.inc',
    'file path' => drupal_get_path ( 'module', 'tripal_galaxy' )
  );

  return $items;
}

/**
 * Implements hook_views_api()
 *
 * This hook tells drupal that there is views support for
 * for this module which then automatically includes the tripal_db.views.inc
 * where all the views integration code is found.
 *
 * @ingroup tripal_galaxy
 */
function tripal_galaxy_views_api() {
  return array (
    'api' => 3.0
  );
}

/**
 *  We need to let drupal know about our theme functions and their arguments.
 *  We create theme functions to allow users of the module to customize the
 *  look and feel of the output generated in this module
 *
 * @ingroup tripal_galaxy
 */
function tripal_galaxy_theme($existing, $type, $theme, $path) {
  $items = array (
    'tripal_galaxy_admin_add_workflow_form_rows' => array (
      'render element' => 'form'
    ),
    'tripal_galaxy_admin_workflows_form_rows' => array(
      'render element' => 'form'
    ),
  );
  return $items;
}

/**
 * Implements hook_[form_id]_alter().
 *
 * Add a submit handler to the client webform form.
 */
function tripal_galaxy_form_webform_client_form_alter(&$form, &$form_state, $form_id ) {
  // Check if this particular webform really is a galaxy webform
  // At each 'turn of the page' of the particular webform this is being called
  if($form['#node']->webform['components'][1]['form_key'] == 'galaxy_webform'){
    $form['#submit'][] = 'tripal_galaxy_webform_client_form_submit';
  }
}

/**
 * Implements submit function for the webform_client_form
 */
function tripal_galaxy_webform_client_form_submit($form, &$form_state) {

  // Don't do anything if the webform isn't finished being filled out.
  if ($form_state['webform_completed'] != TRUE) {
    return;
  }
  try {
    // Get the Galaxy server workflow ID from the form then
    // lookup our internal galaxy workflow ID.
    $workflow_id = $form['#node']->webform['components'][1]['extra']['wfid'];
    $workflow = db_select('tripal_galaxy_workflow', 'tgw')
      ->fields('tgw')
      ->condition('workflow_id', $workflow_id)
      ->execute()
      ->fetchObject();
    // To be implemented more properly once inputs are generated
    $data = array(
      'sid' => $form_state['storage']['details']['sid'],
      'galaxy_workflow_id' => $workflow->galaxy_workflow_id,
      'errors' => '',
      'submit_date' => REQUEST_TIME,
      'status' => 'Waiting',
    );

    // Now insert the submission into the database
    drupal_write_record('tripal_galaxy_workflow_submission', $data);
  }
  catch (Exception $e) {
    drupal_set_message(t('Could not copmlete workflow submission.  Please contact the web site to report this issue.'), 'error');
    watchdog_exception('tripal_galaxy', $e);
  }
  drupal_set_message(t('Your job is successfully submitted to the job queue! You will be notified by email when your job begins and completes.'));
  drupal_goto('/');
}

/**
 *
 */
function tripal_galaxy_workflow_invoke(){

  global $user;

  // Get the workflows that need execution
  $query = db_select('tripal_galaxy_workflow_submission', 'tgws');
  $query->fields('tgws');
  $query->condition('tgws.status', 'Waiting');
  $query->join('tripal_galaxy_workflow', 'tgw', 'tgw.galaxy_workflow_id = tgws.galaxy_workflow_id');
  $query->fields('tgw', array('galaxy_id', 'workflow_id'));
  $query->orderBy('tgws.submit_date', 'ASC');
  $workflows = $query->execute();

  while ($workflow = $workflows->fetchObject()) {
    // The array where the workflow input parameters are stored.
    $parameters = array();

    $query = db_select('webform_submitted_data', 'wsd');
    $query->fields('wsd');
    $query->join('webform_component', 'wc', 'wc.cid = wsd.cid');
    $query->fields('wc', array('type', 'extra'));
    $query->condition('wsd.sid', $workflow->sid);
    $query->orderBy('wsd.cid');
    $submitted_data = $query->execute();

    // Iterate through the submitted data values and create an input aray
    // for Galaxy workflow submission.
    while($data = $submitted_data->fetchObject()) {
      $value = '';

      // The component 'extra' data is serialized so we need to convert it
      $data->extra = unserialize($data->extra);

      // Skip components that don't have an 'input_name' field as these
      // don't correspond to workflow input components.
      if (!array_key_exists('input_name', $data->extra)) {
        continue;
      }

      // Input elements of type 'fixed_value' should not be provided as
      // input for the Galaxy workflow because the defaulst should be used
      if ($data->type == 'fixed_value') {
        continue;
      }

      // Deal with the BDSS_file type.  It will have two rows in the
      // submitted data array. One for file_URL and one for file_upload.
      // they are mutually exclusive and only one will have a real value
      if ($data->type == 'BDSS_file') {
        if ($data->no == 'file_URL' and $data->data) {
          $value = $data->data;
        }
        if ($data->no == 'file_upload' and $data->data) {
          $fid = $data->data;
          if ($fid) {
            $file = file_load($fid);
            $value = file_create_url($file->uri);
          }
        }
      }
      else {
        $value = $data->data;
      }

      // If we don't have a value then skip it and let the workflow use it's
      // own defaults
      if (!$value) {
        continue;
      }

      // NOTE: The step id's (page_num) on the server side are offset by 1
      // so subtract 1, then organize the input settings by their step in the
      // $galaxy_input['parameters'] array.
      $step_index = $data->extra['step_index'];
      $input_name = $data->extra['input_full_name'];
      if (!array_key_exists($step_index, $parameters)) {
        $parameters[$step_index] = array();
      }
      $current_values = $parameters[$step_index];
      _tripal_galaxy_workflow_invoke_build_values($current_values, $input_name, $value);
      $parameters[$step_index] = $current_values;
    }
    print_r($parameters);

    // Get a connection to the remote galaxy instanc4e.
    $galaxy = tripal_get_galaxy_connection($workflow->galaxy_id);
    if ($galaxy) {

      // Create our own history for this test.
      $histories = new GalaxyHistories($galaxy);
      $ourHistory = $histories->create(array(
        'name' => "TG-" . $user->uid . "-" . $workflow->galaxy_workflow_id . "-" . $workflow->sid,
      ));
      $history_id = $ourHistory['id'];


      // Invoke the workflow and check for errors
      $gworkflows = new GalaxyWorkflows($galaxy);
      $invocation = $gworkflows->invoke(array(
        'workflow_id' => $workflow->workflow_id,
        'parameters' => $parameters,
        'input_dataset_ids' => array(),
      ));

      print_r($invocation);

      $error = $galaxy->getError();
      if ($error['type']) {
        watchdog_exception($error['message'], 'error');
        db_update('tripal_galaxy_workflow_submission')
          ->fields(array(
            'status' => 'ERROR',
            'error' => $error['message'],
          ))
          ->condition('galaxy_workflow_id', $workflow->galaxy_workflow_id)
          ->execute();
      }
      else {
        db_update('tripal_galaxy_workflow_submission')
         ->fields(array(
           'status' => 'Submitted',
           'start_time' => REQUEST_TIME,
         ))
         ->condition('galaxy_workflow_id', $workflow->galaxy_workflow_id)
         ->execute();
      }
    }
    else {
      drupal_set_message('Connot connect to the remote galaxy server to launch the workflow');
    }
  }
}

/**
 * A helper function for recursively building a values array.
 *
 * The values array is needed to invoke a Galaxy workflow.
 *
 * @param $values
 *   The array into which the value will be placed.
 * @param $input_full_name
 *   The full name of the input paramter.
 * @param $value
 *   The value to add to the array.
 */
function _tripal_galaxy_workflow_invoke_build_values(&$values, $input_full_name, $value) {
  // Pop the first name off the list.
  $names = explode('|', $input_full_name);
  $name = array_shift($names);

  // As long as we have names in our "name path" then recurse.
  if (count($names) > 0) {
    if (!array_key_exists($name, $values)) {
      $values[$name] = array();
    }
    $next_name = implode("|", $names);
    return _tripal_galaxy_workflow_invoke_build_values($values[$name], $next_name, $value);
  }
  else {
    $values[$name] = $value;
  }
}


/**
 * Implements of hook_webform_component_info().
 *
 * Describes new components for webforms that Galaxy workflows will use.
 */
function tripal_galaxy_webform_component_info() {
  $components = array();
  $components['BDSS_file'] = array(
    'label' => t('BDSS File'),
    'description' => t('Allows multiple paths (URL, upload, Tripal web services) that a file may be attached.'),
    'features' =>  array(
      'csv' => TRUE,
      'email' => FALSE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => FALSE,
      'title_display' => FALSE,
      'title_inline' => FALSE,
      'conditional' => TRUE,
      'group' => FALSE,
      'spam_analysis' => FALSE,
      'attachment' => FALSE,
      'conditional_action_set' => TRUE,
    ),
    'file' => 'includes/components/tripal_galaxy.BDSS_file.inc',
  );
  $components['fixed_value'] = array(
    'label' => t('Fixed Value'),
    'description' => t('A fixed value set by the workflow programmer.'),
    'features' =>  array(
      'csv' => TRUE,
      'email' => FALSE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => FALSE,
      'title_display' => FALSE,
      'title_inline' => FALSE,
      'conditional' => TRUE,
      'group' => FALSE,
      'spam_analysis' => FALSE,
      'attachment' => FALSE,
      'conditional_action_set' => TRUE,
    ),
    'file' => 'includes/components/tripal_galaxy.fixed_value.inc',
  );
  return $components;
}

/**
 * Implements hook_element_info().
 *
 * Used for creating new form API elements.  We nee a new fixed_value type
 * for webforms.
 */
function tripal_galaxy_element_info() {

  $elements['fixed_value'] = array(
    '#input' => 'TRUE',
    '#process' => array('tripal_galaxy_fixed_value_process'),
  );
  $elements['BDSS_file'] = array(
    '#input' => 'TRUE',
    '#process' => array('tripal_galaxy_BDSS_file_process'),
    '#element_validate' => array('tripal_galaxy_BDSS_file_validate'),
  );

  return $elements;
}
/**
 *
 */
function tripal_galaxy_BDSS_file_process($element, $form_state, $complete_form) {
  $file_URL = '';
  $fid = '';

  if (array_key_exists('values', $form_state)) {
    $file_URL = array_key_exists('file_URL', $form_state['values']) ? webform_filter_xss($form_state['input']['file_URL']) : '';
    $fid = array_key_exists('file_upload', $form_state['values']) ? webform_filter_xss($form_state['input']['file_upload']) : '';
  }
  $element['instructions'] = array(
    '#type' => 'item',
    '#markup' => array_key_exists('description', $element) ? $element['description'] : t('Please provide a URL for the file on a remote server or upload the file.'),
    '#title_display' => 'invisible',
  );
  $element['file_URL'] = array(
    '#type' => 'textfield',
    '#default_value' => $file_URL,
    '#description' => 'File URL',
    '#title_display' => 'invisible',
  );
  $element['file_upload'] = array(
    '#type' => 'managed_file',
    '#default_value' => $fid,
    '#description' => 'Upload a file',
    '#title_display' => 'invisible',
  );

  return $element;
}

/**
 *
 */
function tripal_galaxy_BDSS_file_validate($element, $form_state) {
  $is_required = $element['#webform_component']['required'];
  $file_URL = $element['file_URL']['#value'];
  $file_upload = $element['file_upload']['#value'];

  if (is_array($file_upload)) {
    $file_upload = $element['file_upload']['#value']['fid'];
  }
  if ($file_URL and $file_upload) {
    form_error($element, t('Please select a file URL or upload a file but not both.'));
  }

  if (!$file_upload and $file_URL and !valid_url($file_URL, TRUE)) {
    form_error($element['file_URL'], t('The URL is not valid. Please check for errors.'));
  }

  if ($is_required and !$file_URL and !$file_upload) {
    form_error($element, t('Please provide a file URL or upload a file.'));
  }
}

/**
 * Implements a theme for the the new fixed_value form API type.
 *
 * This field has a hidden value, title and markup description.
 */
function tripal_galaxy_fixed_value_process($element, $form_state, $complete_form) {

  // We need to include a hidden field that contains the value so that
  // it works with webform conditionals.
  $element['details'] = array(
    '#type' => 'item',
    '#title' => $element['#title'],
    '#markup' => $element['#markup'],
    '#title_display' => 'invisible',
  );
  $element['value'] = array(
    '#type' => 'hidden',
    '#value' => $element['#value'],
  );
  return $element;
}
